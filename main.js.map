{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-39\",\r\n  headers: {\r\n    authorization: \"4d843643-f9b3-4126-9ca7-8baba1b4cfdc\",\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n};\r\n\r\n \r\n/*const getResponse = (res) => {\r\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\nconst getInitialUser = async () => {\r\n  return fetch(config.baseUrl + \"/users/me\", {\r\n    headers: config.headers,\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst updateUser = async (user) => {\r\n  return fetch(config.baseUrl + \"/users/me\", {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name:user.name,\r\n      about:user.about,\r\n    }),\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst updateAvatar = async (link) => {\r\n  return fetch(config.baseUrl + \"/users/me/avatar\", {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: link,\r\n    }),\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst getInitialCards = async () => {\r\n  return fetch(config.baseUrl + \"/cards\", {\r\n    headers: config.headers,\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst addCard = async (card) => {\r\n  return fetch(config.baseUrl + \"/cards\", {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: card.name,\r\n      link: card.link,\r\n    }),\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst deleteCard = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst addLike = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nconst deleteLike = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => getResponse(res));\r\n};\r\n\r\nexport {\r\n  getInitialUser,\r\n  updateUser,\r\n  updateUserAvatar,\r\n  getInitialCards,\r\n  addCard,\r\n  deleteCard,\r\n  addLike,\r\n  deleteLike,\r\n};*/\r\n\r\n\r\n\r\n\r\n\r\n// Создаем общую функцию для ошибки\r\nfunction checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Загрузка с сервера карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Загрузка с сервера информации о пользователе\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновление профиля методом PATCH\r\nexport const updateProfileUser = (card) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name:card.name,\r\n      about:card.about\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Добавление новой карточки на сервер\r\nexport const addNewCardServer = (card) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: card.name,\r\n      link: card.link,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Удаление карточки с сервера\r\nexport const deleteCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Постановка лайка\r\nexport const addLikeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Снятие лайка\r\nexport const deleteLikeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n\r\n","\r\n/*import { addLike, deleteLike } from \"./api.js\";\r\n\r\n// @todo: Темплейт карточки\r\nconst content = document.querySelector(\"#card-template\").content,\r\n  templateCard = content.querySelector(\".card\");\r\n\r\n// @todo: Функция создания карточки\r\nconst createCard = function (item, userId, removeCard, likeCard, openPopupImage) {\r\n  const newCard = templateCard.cloneNode(true),\r\n    cardImage = newCard.querySelector(\".card__image\"),\r\n    cardTitle = newCard.querySelector(\".card__title\"),\r\n    deleteButton = newCard.querySelector(\".card__delete-button\"),\r\n    likeButton = newCard.querySelector(\".card__like-button\"),\r\n    cardLikeCount = newCard.querySelector(\".card__like-count\");\r\n\r\n  newCard.id = item[\"_id\"];\r\n\r\n  cardImage.setAttribute(\"src\", item.link);\r\n  cardImage.setAttribute(\"alt\", item.name);\r\n  cardTitle.textContent = item.name;\r\n  cardLikeCount.textContent = item.likes.length;\r\n\r\n  const isLiked = item.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  if (item.owner._id === userId) {\r\n    deleteButton.addEventListener(\"click\", (evt) => {\r\n      removeCard(evt, item._id);\r\n    });\r\n  } else {\r\n    deleteButton.remove();\r\n  }\r\n\r\n  likeButton.addEventListener(\"click\", (evt) => {\r\n    likeCard(evt, item._id);\r\n  });\r\n\r\n  cardImage.addEventListener(\"click\", function () {\r\n    openPopupImage(item);\r\n  });\r\n\r\n  return newCard;\r\n};\r\n\r\nconst likeCard = (evt, cardId) => {\r\n  const currentLikes = evt.target.parentNode.querySelector(\".card__like-count\");\r\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\r\n    deleteLike(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.remove(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } else {\r\n    addLike(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.add(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};\r\n\r\nexport { createCard, likeCard };*/\r\n\r\n\r\n\r\n\r\n\r\n/*import { addLike, deleteLike } from \"./api.js\";*/\r\n\r\nimport { addLikeCardServer, deleteLikeCardServer } from './api.js';\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content,\r\n      card = cardTemplate.querySelector('.card');\r\n\r\nfunction createCard(item, showImage) {\r\n  \r\n\r\n  const placesItem = cardTemplate.cloneNode(true)\r\n  const cardImage = placesItem.querySelector('.card__image')\r\n  const cardTitle = placesItem.querySelector('.card__title')\r\n  const cardDeleteButton = placesItem.querySelector('.card__delete-button')\r\n  const cardLikeButton = placesItem.querySelector('.card__like-button')\r\n  const likeCountElement = placesItem.querySelector('.card__like-count')\r\n\r\n  placesItem.id = item[\"_id\"];\r\n\r\n\r\n  cardImage.alt = item.name\r\n  cardImage.src = item.link\r\n  cardTitle.textContent = item.name\r\n  likeCountElement.textContent = item.likes.length;\r\n  \r\n\r\n  /*const isLiked = item.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    cardLikeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  if (item.owner._id === userId) {\r\n    cardDeleteButton.addEventListener(\"click\", (evt) => {\r\n      deleteCard(evt, item._id);\r\n    });\r\n  } else {\r\n    cardDeleteButton.remove();\r\n  }\r\n\r\n  cardLikeButton.addEventListener(\"click\", (evt) => {\r\n    likeCard(evt, item._id);\r\n  });\r\n\r\n  cardImage.addEventListener(\"click\", function () {\r\n    showImage(item);\r\n  });*/\r\n\r\n\r\n\r\n  cardImage.addEventListener('click', () => {\r\n    showImage(item.link, item.name);\r\n  })\r\n\r\n  cardLikeButton.addEventListener('click', () => {\r\n    likeCard(cardLikeButton);\r\n  })\r\n\r\n  cardDeleteButton.addEventListener('click', () => {\r\n    deleteCard(card);\r\n  })\r\n\r\n  return placesItem;\r\n\r\n}\r\n\r\n\r\n/*const likeCard = (evt, cardId) => {\r\n  const currentLikes = evt.target.parentNode.querySelector(\".card__like-count\");\r\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\r\n    deleteLikeCardServer(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.remove(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } else {\r\n    addLikeCardServer(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.add(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};*/\r\n\r\n//Удаление карточки\r\n/*function deleteCard(element) {\r\n    if (element && element.remove) {\r\n      element.remove()\r\n    }\r\n}*/\r\n\r\n\r\nfunction deleteCard(element) {\r\n    const item = element.target.closest('.card');\r\n    item.remove();\r\n}\r\n\r\n//Функция лайка\r\nfunction likeCard(element) {\r\n  element.classList.toggle('card__like-button_is-active')\r\n}\r\n\r\nexport {createCard, deleteCard, likeCard}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*function createCard(cardTemplate, cardData, deleteCard, likeCard, showImage) {\r\n  \r\n  const placesItem = cardTemplate.content.cloneNode(true)\r\n  const card = placesItem.querySelector('.card')\r\n  const cardImage = card.querySelector('.card__image')\r\n  const cardTitle = card.querySelector('.card__title')\r\n  const cardDeleteButton = card.querySelector('.card__delete-button')\r\n  const cardLikeButton = card.querySelector('.card__like-button')\r\n\r\n  cardImage.alt = cardData.name\r\n  cardImage.src = cardData.link\r\n  cardTitle.textContent = cardData.name\r\n\r\n  cardImage.addEventListener('click', () => {\r\n    showImage(cardData.link, cardData.name)\r\n  })\r\n\r\n  cardLikeButton.addEventListener('click', () => {\r\n    likeCard(cardLikeButton)\r\n  })\r\n\r\n  cardDeleteButton.addEventListener('click', () => {\r\n    deleteCard(card)\r\n  })\r\n\r\n  return placesItem;\r\n\r\n}\r\n\r\n//Удаление карточки\r\nfunction deleteCard(element) {\r\n    if (element && element.remove) {\r\n      element.remove()\r\n    }\r\n}\r\n\r\n\r\n/*const likeCard = (evt, cardId) => {\r\n  const currentLikes = evt.target.parentNode.querySelector(\".card__like-count\");\r\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\r\n    deleteLikeCardServer(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.remove(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      }).catch((err) => {console.log(err);});\r\n  } else {\r\n    addLikeCardServer(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.add(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      }).catch((err) => {console.log(err);\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n//Функция лайка\r\n/*function likeCard(element) {\r\n  element.classList.toggle('card__like-button_is-active')\r\n}\r\n\r\nexport {deleteCard, likeCard, createCard}*/\r\n\r\n\r\n\r\n\r\n\r\n/*const template = document.querySelector('#card-template').content;\r\nconst placesContainer = document.querySelector('.places');\r\nconst list = placesContainer.querySelector('.places__list');\r\n\r\nfunction createCard (element, deleteCard, handleLikeClick, handleOpenImage) {\r\n    const templateCopy = template.cloneNode(true).querySelector('.card');\r\n    const cardImage = templateCopy.querySelector('.card__image');\r\n    const cardTitle = templateCopy.querySelector('.card__title');\r\n    const deleteButton = templateCopy.querySelector('.card__delete-button');\r\n    const likeButton = templateCopy.querySelector('.card__like-button');\r\n\r\n    cardTitle.textContent = element.name;\r\n    cardImage.src = element.link;\r\n    cardImage.alt = element.alt;\r\n\r\n    cardImage.addEventListener('click', () => handleOpenImage(cardImage.src, cardTitle.textContent));\r\n\r\n    deleteButton.addEventListener('click', deleteCard);\r\n    likeButton.addEventListener('click', handleLikeClick);\r\n\r\n    return templateCopy;\r\n}\r\n\r\nfunction deleteCard(element) {\r\n    const item = element.target.closest('.card');\r\n    item.remove();\r\n}\r\nfunction handleLikeClick(evt) {\r\n    if (evt.target.classList.contains('card__like-button')) {\r\n        evt.target.classList.toggle('card__like-button_is-active');\r\n    }\r\n}\r\n\r\nexport {createCard, deleteCard, list, handleLikeClick};*/\r\n\r\n\r\n","//Открываем модалку\r\n/*function openModal(modal) {\r\n  modal.classList.add('popup_is-opened')\r\n  document.addEventListener('keyup', closeEsc)\r\n} \r\n\r\n//Закрываем по нажатию клавиши Esc\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector('.popup_is-opened')\r\n    closeModal(openedPopup)\r\n  }\r\n} \r\n\r\n//Закрываем модалку\r\nfunction closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened')\r\n  document.removeEventListener('keyup', closeEsc)\r\n}\r\n\r\nexport {openModal, closeModal}*/\r\n\r\n\r\n\r\n\r\n\r\n//Открываем модалку\r\nfunction openModal(modal) {\r\n  modal.classList.add('popup_is-opened')\r\n  document.addEventListener('keyup', closeEsc)\r\n} \r\n\r\n//Закрываем по нажатию клавиши Esc\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector('.popup_is-opened')\r\n    closeModal(openedPopup)\r\n  }\r\n} \r\n\r\n//Закрываем модалку\r\nfunction closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened')\r\n  document.removeEventListener('keyup', closeEsc)\r\n}\r\n\r\nexport {openModal, closeModal}\r\n\r\n\r\n\r\n","\r\n/*const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n\r\n    setEventListeners(\r\n      formElement,\r\n      validationConfig.inputSelector,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass,\r\n      validationConfig.submitButtonSelector,\r\n      validationConfig.inactiveButtonClass\r\n    );\r\n  });\r\n};\r\n\r\n\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.textContent = \"\";\r\n  errorElement.classList.remove(errorClass);\r\n};\r\n\r\nconst checkInputValidity = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      inputErrorClass,\r\n      errorClass\r\n    );\r\n  } else {\r\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (\r\n  formElement,\r\n  inputSelector,\r\n  inputErrorClass,\r\n  errorClass,\r\n  submitButtonSelector,\r\n  inactiveButtonClass\r\n) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n\r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      checkInputValidity(\r\n        formElement,\r\n        inputElement,\r\n        inputErrorClass,\r\n        errorClass\r\n      );\r\n      toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\nconst clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(\r\n    inputList,\r\n    buttonElement,\r\n    validationConfig.inactiveButtonClass\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(\r\n      formElement,\r\n      inputElement,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass\r\n    );\r\n    inputElement.setCustomValidity(\"\");\r\n  });\r\n};\r\n\r\nexport { enableValidation, clearValidation };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst showError = (formElement, inputElement, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add('.popup__input');\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add('.popup__error_visible');\r\n};\r\n\r\nconst hideError = (formElement, inputElement) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove('.popup__input');\r\n  errorElement.classList.remove('.popup__error_visible');\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  })\r\n};\r\n\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add('.popup__button_disabled');\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove('.popup__button_disabled');\r\n  }\r\n};\r\n\r\n\r\nconst checkInputValidity = (formElement, inputElement, config) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity('');\r\n  }\r\n  if (!inputElement.validity.valid) {\r\n    showError(formElement, inputElement, inputElement.validationMessage, config);\r\n  } else {\r\n    hideError(formElement, inputElement, config);\r\n  }\r\n};\r\n\r\n\r\nconst setEventListeners = (formElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'))\r\n  const buttonElement = formElement.querySelector('.popup__button');\r\n    toggleButtonState(inputList, buttonElement);\r\n    inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', function () {\r\n      checkInputValidity(formElement, inputElement);\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\n\r\nconst enableValidation = () => {\r\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\r\n  formList.forEach((formElement) => {\r\n  formElement.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  });\r\n  setEventListeners(formElement);\r\n  });\r\n};\r\n\r\n\r\nfunction clearValidation(formElement, settings) {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n\r\n\r\nexport {enableValidation, clearValidation}\r\n","\r\n/*import \"./pages/index.css\";\r\nimport { createCard, likeCard } from \"./scripts/card.js\";\r\nimport { openModal, closeModal } from \"./scripts/modal.js\";\r\nimport { enableValidation, clearValidation } from \"./scripts/validation.js\";\r\nimport {\r\n  getInitialUser,\r\n  updateUser,\r\n  updateUserAvatar,\r\n  getInitialCards,\r\n  addCard,\r\n  deleteCard,\r\n} from \"./scripts/api.js\";\r\n\r\n// @todo: DOM узлы\r\nconst popups = Array.from(document.querySelectorAll(\".popup\"));\r\n\r\nconst placesList = document.querySelector(\".places__list\");\r\n\r\nconst popupCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupProfile = document.querySelector(\".popup_type_edit\");\r\nconst popupAvatar = document.querySelector(\".popup_type_avatar\");\r\nconst popupConfirm = document.querySelector(\".popup_type_confirm\");\r\n\r\nconst popupFormEditProfile = document.forms[\"edit-profile\"];\r\nconst popupFormEditAvatar = document.forms[\"edit-avatar\"];\r\nconst popupFormAddCard = document.forms[\"new-place\"];\r\n\r\nconst popupFormImageView = document.querySelector(\".popup_type_image\");\r\n\r\nconst popupImage = popupFormImageView.querySelector(\".popup__image\");\r\nconst popupCaption = popupFormImageView.querySelector(\".popup__caption\");\r\n\r\nconst buttonOpenPopupProfile = document.querySelector(\".profile__edit-button\");\r\n\r\nconst buttonEditAvatar = document.querySelector(\".profile__image\");\r\n\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileImage = document.querySelector(\".profile__image\");\r\n\r\nconst buttonOpenPopupCard = document.querySelector(\".profile__add-button\");\r\nconst buttonConfirmAccept = popupConfirm.querySelector(\r\n  \".confirm_accept__button\"\r\n);\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nlet userId;\r\n\r\nconst renderLoading = (isLoading, button) => {\r\n  button.textContent = isLoading ? \"Сохранение...\" : \"Сохранить\";\r\n};\r\n\r\nconst confirmDeleteCard = (evt, cardId) => {\r\n  openModal(popupConfirm);\r\n  popupConfirm.dataset.cardId = cardId;\r\n};\r\n\r\nconst handleConfirmDeleteCard = async (evt) => {\r\n  deleteCard(popupConfirm.dataset.cardId)\r\n    .then((res) => {\r\n      const card = document.getElementById(popupConfirm.dataset.cardId);\r\n      card.remove();\r\n      popupConfirm.dataset.cardId=\"\";\r\n      closeModal(popupConfirm);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\nbuttonConfirmAccept.addEventListener(\"click\", handleConfirmDeleteCard);\r\n\r\nconst handleFormEditSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupFormEditProfile.querySelector(\".popup__button\"));\r\n  updateUser({\r\n    name: popupFormEditProfile.name.value,\r\n    about: popupFormEditProfile.description.value,\r\n  })\r\n    .then((userInfo) => {\r\n      profileName.textContent = userInfo.name;\r\n      profileDescription.textContent = userInfo.about;\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(\r\n        false,\r\n        popupFormEditProfile.querySelector(\".popup__button\")\r\n      );\r\n    });\r\n};\r\npopupFormEditProfile.addEventListener(\"submit\", handleFormEditSubmit);\r\n\r\nbuttonOpenPopupProfile.addEventListener(\"click\", function () {\r\n  clearValidation(popupFormEditProfile, validationConfig);\r\n  popupFormEditProfile.elements.name.value = profileName.textContent;\r\n  popupFormEditProfile.elements.description.value = profileDescription.textContent;\r\n  openModal(popupProfile);\r\n});\r\n \r\nconst handleAvatarFormSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupFormEditAvatar.querySelector(\".popup__button\"));\r\n  updateUserAvatar(popupFormEditAvatar.link.value)\r\n    .then((userInfo) => {\r\n      profileImage.style.backgroundImage = `url(${userInfo.avatar})`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, popupFormEditAvatar.querySelector(\".popup__button\"));\r\n    });\r\n};\r\n\r\n\r\npopupFormEditAvatar.addEventListener(\"submit\", handleAvatarFormSubmit);\r\n\r\nbuttonEditAvatar.addEventListener(\"click\", () => {\r\n  popupFormEditAvatar.reset();\r\n  clearValidation(popupFormEditAvatar, validationConfig);\r\n  openModal(popupAvatar);\r\n});\r\n\r\n\r\n\r\n\r\nconst handleAddCardFormSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupCard.querySelector(\".popup__button\"));\r\n\r\n  const name = popupFormAddCard.elements.name.value;\r\n  const link = popupFormAddCard.elements.link.value;\r\n  addCard({ name, link })\r\n    .then((card) => {\r\n      const newCard = createCard(\r\n        card,\r\n        userId,\r\n        confirmDeleteCard,\r\n        likeCard,\r\n        openPopupImage\r\n      );\r\n      placesList.prepend(newCard);\r\n      closeModal(popupCard);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, popupFormAddCard.querySelector(\".popup__button\"));\r\n    });\r\n};\r\npopupFormAddCard.addEventListener(\"submit\", handleAddCardFormSubmit);\r\n\r\nbuttonOpenPopupCard.addEventListener(\"click\", function () {\r\n  popupFormAddCard.reset();\r\n  clearValidation(popupFormAddCard, validationConfig);\r\n  openModal(popupCard);\r\n});\r\n\r\nfunction openPopupImage(item) {\r\n  popupImage.src = item.link;\r\n  popupImage.alt = item.name;\r\n  popupCaption.textContent = item.name;\r\n  openModal(popupFormImageView);\r\n}\r\n\r\npopups.forEach((popup) => {\r\n  popup.classList.add(\"popup_is-animated\");\r\n  popup.addEventListener(\"mousedown\", (evt) => {\r\n    if (evt.target.classList.contains(\"popup_is-opened\")) {\r\n      closeModal(popup);\r\n    }\r\n    if (evt.target.classList.contains(\"popup__close\")) {\r\n      closeModal(popup);\r\n    }\r\n  });\r\n});\r\n\r\n// Загрузка аватара и карточек\r\nPromise.all([getInitialUser(), getInitialCards()])\r\n  .then(([userInfo, cards]) => {\r\n    userId = userInfo._id;\r\n    profileName.textContent = userInfo.name;\r\n    profileDescription.textContent = userInfo.about;\r\n    profileImage.style.backgroundImage = `url(${userInfo.avatar})`;\r\n\r\n    cards.forEach((card) => {\r\n      const newCard = createCard(\r\n        card,\r\n        userId,\r\n        confirmDeleteCard,\r\n        likeCard,\r\n        openPopupImage\r\n      );\r\n      placesList.append(newCard);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nenableValidation(validationConfig);*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport './pages/index.css';\r\nimport { createCard, deleteCard, likeCard } from './scripts/card.js';\r\nimport { openModal, closeModal} from './scripts/modal.js';\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfileUser, addNewCardServer, updateAvatar/*, deleteCardServer*/} from './scripts/api.js';\r\n\r\n\r\n//Получаем элементы из DOM\r\n/*const cardTemplate = document.querySelector('#card-template');*/\r\n/*const popups = Array.from(document.querySelectorAll(\".popup\"));*/\r\nconst placesList = document.querySelector('.places__list');\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\nconst avatarPopup = document.querySelector(\".popup_type_avatar\");\r\nconst avatarForm = document.forms[\"update-avatar\"];\r\nconst avatarInput = avatarForm.querySelector(\".popup__input_type_avatar-url\");\r\nconst avatarImage = document.querySelector(\".profile__image\");\r\n\r\n/*const popupConfirm = document.querySelector('.popup_type_confirm');*/\r\n/*const profileImage = document.querySelector('.profile__image');*/\r\n\r\n/*const buttonConfirmAccept = popupConfirm.querySelector('.confirm_accept__button');*/\r\n\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n};\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n};\r\n\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n};\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n};\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n};\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n};\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n};\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n};\r\n\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\nlet userId;\r\n\r\n\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n\r\n\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\naddCardForm.form.addEventListener('submit', (evt) => {\r\n  addNewCard(evt, openModal, showImage, closeModal)\r\n});\r\n\r\n//Функция просмотра изображения\r\nfunction showImage(link, name) {\r\n  modalShowImage.image.src = link\r\n  modalShowImage.image.alt = name\r\n  modalShowImage.text.textContent = name\r\n  openModal(modals.showImage)\r\n}\r\n\r\n\r\n\r\nconst addLoading = (isLoading, button) => {\r\n  button.textContent = isLoading ? 'Сохранение...' : 'Сохранить';\r\n};\r\n\r\n\r\n//Карточка\r\n//Открываем по клику на кнопку \r\nmodalAddCard.openButton.addEventListener('click', () => {\r\n  openModal(modals.addNewCard)\r\n});\r\n\r\n//Создаем новую карточку\r\nfunction addNewCard(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n  addLoading(true, modals.addNewCard.querySelector('.popup__button'));\r\n\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n  addNewCardServer(newCardData.name, newCardData.link)\r\n    .then((data) => {\r\n      const newCard = createCard(\r\n        data,\r\n        userId,\r\n        likeCard,\r\n        showImage,\r\n        deleteCard\r\n      );\r\n      placesList.prepend(newCard);\r\n    })\r\n    .catch((err) => {\r\n      console.log('Ошибка', err);\r\n    })\r\n    .finally(() => {\r\n      addLoading(false, addCardForm.form.querySelector('.popup__button'));\r\n      closeModal(modals.addNewCard);\r\n      addCardForm.form.reset();\r\n    });\r\n}\r\n\r\n//Профиль\r\n\r\n\r\n//Открываем по клику на кнопку \r\n\r\nmodalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm();\r\n})\r\n\r\n//Присваиваем поля форме профеля\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n  // Обработчик 'отправки' формы \r\n\r\nfunction submitEditForm(evt) {\r\n  evt.preventDefault();\r\n  addLoading(true, editForm.form.querySelector('.popup__button'));\r\n  updateProfileUser({\r\n    name: editForm.form.name.value,\r\n    about: editForm.form.description.value,\r\n  })\r\n    .then((DataInfo) => {\r\n      //Обновляем поля и закрываем форму\r\n      profile.name.textContent = editForm.nameInput.value\r\n      profile.description.textContent = editForm.jobInput.value\r\n      closeModal(modals.popupTypeEdit);\r\n    })\r\n    .catch((err) => {\r\n      console.log('Ошибка при загрузке данных:', err);\r\n    })\r\n    .finally(() => {\r\n      addLoading(false, editForm.form.querySelector('.popup__button'));\r\n    })\r\n};\r\n\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((card) => {\r\n      const cardElement = createCard(\r\n        card,\r\n        likeCard, \r\n        deleteCard,\r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log('Ошибка при загрузке данных:', err);\r\n  });\r\n\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\n\r\nenableValidation(validationConfig);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import './pages/index.css';\r\nimport { createCard, likeCard, deleteCard } from './scripts/card.js'\r\nimport { openModal, closeModal} from './scripts/modal.js'\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfileUser, addNewCardServer, updateAvatar, deleteCardServer} from './scripts/api.js';\r\n\r\n\r\n\r\n//Получаем элементы из DOM\r\nconst cardTemplate = document.querySelector('#card-template')\r\nconst placesList = document.querySelector('.places__list')\r\nconst popups = document.querySelectorAll('.popup')\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n}\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n}\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n}\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n}\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n}\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n}\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n}\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n}\r\n\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\nlet userId;*/\r\n\r\n\r\n//Добавление карточек в DOM\r\n/*initialCards.forEach((cardData) => {\r\n  placesList.appendChild(createCard(cardTemplate, cardData, deleteCard, likeCard, showImage))\r\n})*/\r\n\r\n//Прослушиватели\r\n\r\n//Открываем по клику на кнопку\r\n/*modalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm()\r\n})\r\n\r\nmodalAddCard.openButton.addEventListener('click', () => {\r\n  openModal(modals.addNewCard)\r\n})\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\nforms.addNewCard.addEventListener('submit', (evt) => {\r\n  addNewCard(evt, cardTemplate, showImage, closeModal)\r\n});\r\n\r\n//Функция просмотра изображения\r\nfunction showImage(link, name) {\r\n  modalShowImage.image.src = link\r\n  modalShowImage.image.alt = name\r\n  modalShowImage.text.textContent = name\r\n  openModal(modals.showImage)\r\n}\r\n\r\n//Создаем новую карточку\r\nfunction addNewCard(evt, cardTemplate, showImage, closeModal) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault()\r\n\r\n  //Объект с данными новой карточки\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n  //Новая карточка\r\n  const newCard = createCard(\r\n    cardTemplate, \r\n    newCardData, \r\n    deleteCard, \r\n    likeCard, \r\n    showImage\r\n  )\r\n\r\n  placesList.prepend(newCard)\r\n\r\n  addCardForm.form.reset()\r\n\r\n  closeModal(modals.addNewCard)\r\n}\r\n\r\n//Присваиваем поля форме\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n// Обработчик 'отправки' формы\r\nfunction submitEditForm(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n\r\n  //Обновляем поля и закрываем форму\r\n  profile.name.textContent = editForm.nameInput.value\r\n  profile.description.textContent = editForm.jobInput.value\r\n    \r\n  closeModal(modals.popupTypeEdit)\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userInfo, cards]) => {\r\n    userId = userInfo._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userInfo.name;\r\n    profile.description.textContent = userInfo.about;\r\n    avatarImage.style.backgroundImage = `url(${userInfo.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((card) => {\r\n      const cardElement = createCard(\r\n        card,\r\n        likeCard, \r\n        deleteCard,\r\n        userId\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка при загрузке данных:\", err);\r\n  });\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\n  enableValidation(validationConfig);*/\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","card","createCard","item","showImage","placesItem","cloneNode","cardImage","cardTitle","cardDeleteButton","cardLikeButton","likeCountElement","id","alt","name","src","link","textContent","likes","length","addEventListener","likeCard","target","closest","remove","element","classList","toggle","openModal","modal","add","closeEsc","evt","key","closeModal","removeEventListener","hideError","formElement","inputElement","errorElement","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","disabled","userId","placesList","popups","querySelectorAll","avatarPopup","avatarForm","forms","avatarInput","avatarImage","modals","popupTypeEdit","addNewCard","modalEdit","openButton","closeButton","modalAddCard","addCardForm","form","url","profile","description","editForm","nameInput","jobInput","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","forEach","popup","currentTarget","preventDefault","addLoading","fetch","method","body","JSON","stringify","about","then","updateProfileUser","value","DataInfo","catch","err","console","log","finally","newCardData","addNewCardServer","data","newCard","prepend","reset","isLoading","button","all","_ref","_ref2","userData","cards","_id","style","backgroundImage","avatar","cardElement","append","settings","Array","from","avatarUrl","submitButton","submitter","originalText","patternMismatch","setCustomValidity","dataset","errorMessage","showError","validationMessage","checkInputValidity","setEventListeners"],"sourceRoot":""}