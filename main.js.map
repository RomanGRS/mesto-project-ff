{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-39\",\r\n  headers: {\r\n    authorization: \"4d843643-f9b3-4126-9ca7-8baba1b4cfdc\",\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n};\r\n\r\n// Создаем общую функцию для ошибки\r\nfunction checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n\r\n// Загрузка с сервера карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n\r\n// Загрузка с сервера информации о пользователе\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  })\r\n   .then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Обновление профиля методом PATCH\r\nexport const updateProfile = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Добавление новой карточки на сервер\r\nexport const addNewCardServer = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Удаление карточки с сервера\r\nexport const deleteCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Постановка лайка\r\nexport const likeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Снятие лайка\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Функция для проверки обьекта ответа.\r\n/*export const handleResponse = (response) => {\r\n    if (response.ok) {\r\n        return response.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${response.status}`);\r\n};\r\n\r\n// Проверка фотографии для подтверждения.\r\nexport const updatePhotoCheck = (url) => {\r\n    return fetch(`${url.value}`, {\r\n        method: 'HEAD',\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                console.log('Произошла ошибка');\r\n            }\r\n            const contentType = response.headers.get('Content-Type');\r\n            if (!contentType.startsWith('image/')) {\r\n                console.log('URL не является картинкой');\r\n            }\r\n        })\r\n};\r\n\r\n// Обновление фотографии пользователя на сайте.\r\nexport const updatePhoto = (newAvatarPhoto) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            avatar: `${newAvatarPhoto.value}`\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Редактирование имени и деятельности пользователя в профиле.\r\nexport const updateProfile = (nameData, aboutData,) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameData,\r\n            about: aboutData,\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Добавление карточки на сайт.\r\nexport const addCard = (nameCard, linkCard) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'POST',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameCard,\r\n            link: linkCard,\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Загрузка информации о пользователе с сервера.\r\nexport const getUserData = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Загрузка карточек с сервера.\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Удаление карточки по нажатию.\r\nexport const deleteCard = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Функция добавления лайка на к арточку.\r\nexport const addLike = (cardId, currentLike) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: currentLike ? 'DELETE' : 'PUT',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n}; */ \r\n\r\n","import { deleteCardServer, likeCardServer, unlikeCard } from './api.js';\r\n\r\nfunction createCard(cardTemplate, cardData, deleteCard, likeCard, showImage) {\r\n  \r\n  const placesItem = cardTemplate.content.cloneNode(true)\r\n  const card = placesItem.querySelector('.card')\r\n  const cardImage = card.querySelector('.card__image')\r\n  const cardTitle = card.querySelector('.card__title')\r\n  const cardDeleteButton = card.querySelector('.card__delete-button')\r\n  const cardLikeButton = card.querySelector('.card__like-button')\r\n  const likeCountElement = placesItem.querySelector('.card__like-count')\r\n\r\n  cardImage.alt = cardData.name\r\n  cardImage.src = cardData.link\r\n  cardTitle.textContent = cardData.name\r\n\r\n  \r\n  cardImage.addEventListener('click', () => {\r\n    showImage(cardData.link, cardData.name)\r\n  })\r\n\r\n  cardLikeButton.addEventListener('click', () => {\r\n    likeCard(cardLikeButton, cardData._id, likeCountElement)\r\n  })\r\n\r\n  cardDeleteButton.addEventListener('click', () => {\r\n    deleteCard(card)\r\n  })\r\n\r\n  return placesItem;\r\n}\r\n\r\n//Удаление карточки\r\nfunction deleteCard(element) {\r\n    if (element && element.remove) {\r\n      element.remove()\r\n    }\r\n}\r\n\r\n//Функция лайка\r\nfunction likeCard(element) {\r\n  element.classList.toggle('card__like-button_is-active')\r\n}\r\n\r\nexport {deleteCard, likeCard, createCard}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { openModal } from \"./modal.js\";\r\n\r\n// Функция создания карточки.\r\nexport function createCard(card, deleteCard, addLike, userId, openPopupImage) {\r\n    const templateList = document.querySelector('#card-template').content;\r\n    const templateCard = templateList.querySelector('.card').cloneNode(true);\r\n    const likeButton = templateCard.querySelector('.card__like-button');\r\n    const image = templateCard.querySelector('.card__image');\r\n    const likeCount = templateCard.querySelector('.card__count');\r\n    likeCount.textContent = card.likes ? card.likes.length : 0;\r\n    templateCard.querySelector('.card__title').textContent = card.name;\r\n    const isLiked = card.likes.some(like => like._id === userId);\r\n    if (isLiked) {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n    }\r\n    \r\n    const popupDelete = templateCard.querySelector('.popup_type_trash');\r\n    templateCard.querySelector('.card__like-button').addEventListener('click', () => {\r\n        const currentLike = likeButton.classList.contains('card__like-button_is-active');\r\n        addLike(card._id, currentLike)\r\n            .then((data) => {\r\n                console.log(data)\r\n                likeButton.classList.toggle('card__like-button_is-active');\r\n                likeCount.textContent = data.likes.length;\r\n            })\r\n            .catch((error) => {\r\n                console.log('Ошибка', error);\r\n            })\r\n    }\r\n    );\r\n\r\n    // Проверка идентификатора пользователя с остальными пользователями.\r\n    if (userId !== card.owner._id) {\r\n        templateCard.querySelector('.card__delete-button').classList.remove('card__delete-button');\r\n    } else {\r\n        templateCard.querySelector('.card__delete-button').addEventListener('click', function () {\r\n            openModal(popupDelete);\r\n        })\r\n        templateCard.querySelector('.popup__button').addEventListener('click', () => deleteCard(card._id)\r\n            .then(() => {\r\n                templateCard.remove();\r\n            })\r\n            .catch((error) => {\r\n                console.log('Ошибка', error);\r\n            })\r\n        )\r\n    }\r\n\r\n    image.addEventListener('click', function () {\r\n        openPopupImage(card.link, card.name)\r\n    })\r\n\r\n    // Создание мелких карточек на сайте.\r\n    image.src = card.link;\r\n    image.alt = card.name;\r\n    return templateCard;\r\n};*/\r\n\r\n","//Открываем модалку\r\nfunction openModal(modal) {\r\n  modal.classList.add('popup_is-opened')\r\n  document.addEventListener('keyup', closeEsc)\r\n} \r\n\r\n//Закрываем по нажатию клавиши Esc\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector('.popup_is-opened')\r\n    closeModal(openedPopup)\r\n  }\r\n} \r\n\r\n//Закрываем модалку\r\nfunction closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened')\r\n  document.removeEventListener('keyup', closeEsc)\r\n}\r\n\r\nexport {openModal, closeModal}\r\n\r\n\r\n\r\n\r\n\r\n// Function to open popup\r\n/*export function openPopup(popup) {\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closeByEscape); // Добавляем слушатель при открытии\r\n}\r\n\r\n// Function to close popup\r\nexport function closePopup(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeByEscape); // Удаляем слушатель при закрытии\r\n}\r\n\r\nfunction closeByEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    closePopup(openedPopup);\r\n  }\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Открыть модальное окно.\r\n/*export function openModal(currentModal) {\r\n    currentModal.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', closeModalEscape);\r\n};\r\n// Закрыть модальное окно.\r\nexport function closeModal(currentModal) {\r\n    currentModal.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', closeModalEscape);\r\n\r\n};\r\n// Закрыть модальное окно по оверлею.\r\nexport function closeModalOverlay(evt) {\r\n    const currentModal = document.querySelector('.popup_is-opened');\r\n    if (evt.target === currentModal) {\r\n        closeModal(currentModal);\r\n    }\r\n};\r\n// Закрыть модальное окно по Escape.\r\nexport function closeModalEscape(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const currentModal = document.querySelector('.popup_is-opened');\r\n        if (currentModal) {\r\n            closeModal(currentModal);\r\n        }\r\n    }\r\n};*/","\r\nconst showError = (formElement, inputElement, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add('.popup__input');\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add('.popup__error_visible');\r\n};\r\n\r\nconst hideError = (formElement, inputElement) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove('.popup__input');\r\n  errorElement.classList.remove('.popup__error_visible');\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  })\r\n};\r\n\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add('.popup__button_disabled');\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove('.popup__button_disabled');\r\n  }\r\n};\r\n\r\n\r\nconst checkInputValidity = (formElement, inputElement, config) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity('');\r\n  }\r\n  if (!inputElement.validity.valid) {\r\n    showError(formElement, inputElement, inputElement.validationMessage, config);\r\n  } else {\r\n    hideError(formElement, inputElement, config);\r\n  }\r\n};\r\n\r\n\r\nconst setEventListeners = (formElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'))\r\n  const buttonElement = formElement.querySelector('.popup__button');\r\n    toggleButtonState(inputList, buttonElement);\r\n    inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', function () {\r\n      checkInputValidity(formElement, inputElement);\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\n\r\nconst enableValidation = () => {\r\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\r\n  formList.forEach((formElement) => {\r\n  formElement.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  });\r\n  setEventListeners(formElement);\r\n  });\r\n};\r\n\r\n\r\nfunction clearValidation(formElement, settings) {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n\r\n\r\nexport {enableValidation, clearValidation}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Проверка валидации.\r\n/*export const isValid = (formElement, inputElement, configValidation) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    } else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n    if (!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\r\n    } else {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    }\r\n};\r\n\r\n// Функция отображения ошибок валидации.\r\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.add(configValidation.errorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(configValidation.inputErrorClass);\r\n};\r\n\r\n// Функция скрытия ошибок валидации.\r\nexport const hideInputError = (formElement, inputElement, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(configValidation.errorClass);\r\n    errorElement.textContent = '';\r\n    errorElement.classList.remove(configValidation.inputErrorClass);\r\n};\r\n\r\n// Функция отключения кнопки.\r\nconst disableSubmitButton = (button, config) => {\r\n    button.disabled = true;\r\n    button.classList.add(config.inactiveButtonClass);\r\n};\r\n\r\n// Функция включения кнопок.\r\nconst enableSubmitButton = (button, config) => {\r\n    button.disabled = false;\r\n    button.classList.remove(config.inactiveButtonClass);\r\n};\r\n\r\n// Проверка на не валидность хотя бы одного поля ввода.\r\nexport const hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n        return !inputElement.validity.valid;\r\n    })\r\n};\r\n\r\n// Проверка на включение и выключение кнопки.\r\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\r\n    if (hasInvalidInput(inputList)) {\r\n        disableSubmitButton(buttonElement, configValidation);\r\n    } else {\r\n        enableSubmitButton(buttonElement, configValidation);\r\n    }\r\n};\r\n\r\n// Поиск всех полей ввода и кнопки обход всех полей ввода и добавление слушателей.\r\nexport const setEventListeners = (formElement, configValidation) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\r\n    toggleButtonState(inputList, buttonElement, configValidation);\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n            isValid(formElement, inputElement, configValidation);\r\n            toggleButtonState(inputList, buttonElement, configValidation);\r\n        });\r\n    });\r\n};\r\n\r\n// Поиск всех форм на странице и передача их функции слушателю полей.\r\nexport const enableValidation = (configValidation) => {\r\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector));\r\n    formList.forEach((formElement) => {\r\n        setEventListeners(formElement, configValidation);\r\n    });\r\n};\r\n\r\n// Функция очистки полей валидации.\r\nexport function clearValidation(formElement, configValidation) {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\r\n\r\n    inputList.forEach((inputElement) => {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    });\r\n\r\n    disableSubmitButton(buttonElement, configValidation);\r\n};*/\r\n\r\n\r\n","\r\nimport './pages/index.css';\r\nimport { createCard, likeCard, deleteCard } from './scripts/card.js';\r\nimport { openModal, closeModal} from './scripts/modal.js';\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfile, addNewCardServer, updateAvatar} from './scripts/api.js';\r\n\r\n\r\nlet userId;\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\nenableValidation(validationConfig);\r\n\r\n\r\n//Получаем элементы из DOM\r\nconst cardTemplate = document.querySelector('#card-template');\r\nconst placesList = document.querySelector('.places__list');\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\nconst avatarPopup = document.querySelector(\".popup_type_avatar\");\r\nconst avatarForm = document.forms[\"update-avatar\"];\r\nconst avatarInput = avatarForm.querySelector(\".popup__input_type_avatar-url\");\r\nconst avatarImage = document.querySelector(\".profile__image\");\r\n\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n};\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n};\r\n\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n};\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n};\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n};\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n};\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n};\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n};\r\n\r\n\r\n//Прослушиватели\r\n\r\n//Открываем по клику на кнопку\r\nmodalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm()\r\n})\r\n\r\nmodalEdit.openButton.addEventListener(\"click\", () => {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n  clearValidation(editForm.form, validationConfig);\r\n  openModal(modals.popupTypeEdit);\r\n});\r\n\r\nmodalAddCard.openButton.addEventListener(\"click\", () => {\r\n  forms.addNewCard.reset();\r\n  clearValidation(forms.addNewCard, validationConfig);\r\n  openModal(modals.addNewCard);\r\n});\r\n\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\n\r\nforms.addNewCard.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  addNewCardServer(addCardForm.name.value, addCardForm.url.value)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(\r\n        cardData,\r\n        deleteCard,\r\n        likeCard,\r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.prepend(cardElement);\r\n      closePopup(modals.addNewCard);\r\n      forms.addNewCard.reset();\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\n\r\n//Функция просмотра изображения\r\nfunction showImage(cardData) {\r\n  modalShowImage.image.src = link\r\n  modalShowImage.image.alt = cardData.name\r\n  modalShowImage.text.textContent = cardData.name\r\n  openModal(modals.showImage)\r\n}\r\n\r\n//Создаем новую карточку\r\n/*function addNewCard(evt, cardTemplate, showImage, closeModal) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault()\r\n\r\n  //Объект с данными новой карточки\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n //Новая карточка\r\n  const newCard = createCard(\r\n    cardTemplate, \r\n    newCardData, \r\n    deleteCard, \r\n    likeCard, \r\n    addNewCardServer,\r\n    showImage\r\n  )\r\n  \r\n  placesList.prepend(newCard)\r\n  addCardForm.form.reset()\r\n  closeModal(modals.addNewCard)\r\n}*/\r\n\r\n\r\n\r\n//Присваиваем поля форме\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n// Обработчик 'отправки' формы\r\nfunction submitEditForm(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n\r\n  //Обновляем поля и закрываем форму\r\n  profile.name.textContent = editForm.nameInput.value\r\n  profile.description.textContent = editForm.jobInput.value\r\n    \r\n  closeModal(modals.popupTypeEdit)\r\n}\r\n\r\n\r\n\r\n// Close buttons\r\ndocument.querySelectorAll(\".popup__close\").forEach((button) => {\r\n  button.addEventListener(\"click\", () => {\r\n    const popup = button.closest(\".popup\");\r\n    closeModal(popup);\r\n  });\r\n});\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((cardData) => {\r\n      const cardElement = createCard(\r\n        cardData,\r\n        deleteCard, \r\n        likeCard, \r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка при загрузке данных:\", err);\r\n  })\r\n\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import './pages/index.css';\r\nimport { createCard } from './scripts/card.js';\r\nimport { openModal, closeModal, closeModalOverlay } from './scripts/modal.js';\r\nimport { enableValidation, clearValidation } from './scripts/validation.js';\r\nimport { updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, getInitialCards, deleteCard, addLike } from './scripts/api.js';\r\n\r\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\r\nconst popupEditProfile = document.querySelector('.popup_type_edit');\r\nconst buttonAddCard = document.querySelector('.profile__add-button');\r\nconst popupAddCard = document.querySelector('.popup_type_new-card');\r\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\r\nconst avatar = document.querySelector('.profile__image');\r\nconst nameInput = document.querySelector('.popup__input_type_name');\r\nconst aboutInput = document.querySelector('.popup__input_type_description');\r\nconst nameTitle = document.querySelector('.profile__title');\r\nconst jobTitle = document.querySelector('.profile__description');\r\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\r\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\r\nconst popupImage = document.querySelector('.popup__image');\r\nconst popupImageOpen = document.querySelector('.popup_type_image');\r\nconst popupImageDescription = document.querySelector('.popup__caption');\r\nconst cardList = document.querySelector('.places__list');\r\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\r\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\r\n\r\n/**\r\n * Объект опции:\r\n * 1. Элемент формы.\r\n * 2. Элемент поля ввода.\r\n * 3. Кнопка отправки формы.\r\n * 4. Класс для отключения кнопки.\r\n * 5. Класс для выделения попапа цветом.\r\n * 6. Класс для отображения попапа.\r\n */\r\n\r\n/*const configValidation = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__error_visible',\r\n};\r\n\r\n// Открытие модального окна по нажатию на аватарку. \r\navatar.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    openModal(popupNewAvatar);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку добавления карточки.\r\nbuttonAddCard.addEventListener('click', function () {\r\n    clearValidation(formAddCard, configValidation);\r\n    openModal(popupAddCard);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\r\nbuttonEditProfile.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    nameInput.value = nameTitle.textContent;\r\n    aboutInput.value = jobTitle.textContent;\r\n    openModal(popupEditProfile);\r\n});\r\n\r\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\r\ndocument.addEventListener('click', function (evt) {\r\n    if (evt.target.classList.contains('popup__close')) {\r\n        const currentModal = evt.target.closest('.popup');\r\n        closeModal(currentModal);\r\n    }\r\n});\r\n\r\n// Открытие модального окна с изображением.\r\nfunction openPopupImage(imageSrc, imageAlt) {\r\n    popupImage.src = imageSrc;\r\n    popupImage.alt = imageAlt;\r\n    popupImageDescription.textContent = imageAlt;\r\n    openModal(popupImageOpen);\r\n};\r\n\r\n// Закрытие модального окна по оверлею.\r\ndocument.addEventListener('click', closeModalOverlay);\r\n\r\n// Запуск функции поиска всех форм на странице.\r\nenableValidation(configValidation);\r\n\r\n// Обновление фотографии.\r\nformPhotoProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n    updatePhotoCheck(newAvatarPhoto)\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n    updatePhoto(newAvatarPhoto)\r\n        .then((data) => {\r\n            avatar.style.backgroundImage = `url(${data.avatar})`;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\";\r\n            buttonElement.disabled = false;\r\n            closeModal(popupNewAvatar);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка:', error);\r\n        })\r\n});\r\n\r\n// Редактирование профиля.\r\nformEditProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    nameTitle.textContent = nameInput.value;\r\n    jobTitle.textContent = aboutInput.value;\r\n\r\n    const buttonElement = formEditProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\"\r\n    buttonElement.disabled = true;\r\n\r\n    updateProfile(nameInput.value, aboutInput.value)\r\n        .then((data) => {\r\n            nameTitle.textContent = data.name;\r\n            jobTitle.textContent = data.about;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            closeModal(popupEditProfile);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\n// Добавление карточки.\r\nformAddCard.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formAddCard.querySelector('.popup__button');\r\n    const item = {\r\n        name: document.querySelector('.popup__input_type_card-name').value,\r\n        link: document.querySelector('.popup__input_type_url').value,\r\n    }\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n\r\n    addCard(item.name, item.link)\r\n        .then((data) => {\r\n            const newCard = createCard(data,\r\n                deleteCard,\r\n                addLike,\r\n                data.owner._id,\r\n                openPopupImage);\r\n            cardList.prepend(newCard);\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            formAddCard.reset();\r\n            closeModal(popupAddCard);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\nconst promises = [getUserData(), getInitialCards()];\r\nPromise.all(promises)\r\n    .then(([userData, getInitialCards]) => {\r\n        document.querySelector('.profile__image').style.backgroundImage = `url(${userData.avatar})`;\r\n        nameTitle.textContent = userData.name;\r\n        jobTitle.textContent = userData.about;\r\n        const userId = userData._id;\r\n        getInitialCards.forEach(function (item) {\r\n            const newCard = createCard(item, deleteCard, addLike, userId, openPopupImage);\r\n            cardList.append(newCard);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.log('Ошибка', error);\r\n    });*/\r\n\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","createCard","cardTemplate","cardData","deleteCard","likeCard","showImage","placesItem","content","cloneNode","card","querySelector","cardImage","cardTitle","cardDeleteButton","cardLikeButton","likeCountElement","alt","name","src","link","textContent","addEventListener","_id","element","remove","classList","toggle","openModal","modal","add","document","closeEsc","evt","key","closeModal","removeEventListener","userId","hideError","formElement","inputElement","errorElement","id","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","disabled","clearValidation","settings","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","validationConfig","formSelector","inactiveButtonClass","inputErrorClass","errorClass","preventDefault","patternMismatch","setCustomValidity","dataset","errorMessage","showError","validationMessage","checkInputValidity","setEventListeners","placesList","popups","avatarPopup","avatarForm","forms","avatarInput","avatarImage","modals","popupTypeEdit","addNewCard","modalEdit","openButton","closeButton","modalAddCard","modalShowImage","image","text","addCardForm","form","url","profile","description","editForm","nameInput","jobInput","value","reset","popup","target","currentTarget","submitButton","submitter","originalText","fetch","method","body","JSON","stringify","then","addNewCardServer","cardElement","prepend","closePopup","catch","err","console","log","finally","button","closest","all","_ref","_ref2","userData","cards","about","style","backgroundImage","avatar","append","avatarUrl"],"sourceRoot":""}