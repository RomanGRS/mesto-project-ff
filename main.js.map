{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-39\",\r\n  headers: {\r\n    authorization: \"4d843643-f9b3-4126-9ca7-8baba1b4cfdc\",\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n};\r\n\r\n// Создаем общую функцию для ошибки\r\nfunction checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Загрузка с сервера карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Загрузка с сервера информации о пользователе\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновление профиля методом PATCH\r\nexport const updateProfileUser = (card) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name:card.name,\r\n      about:card.about\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Добавление новой карточки на сервер\r\nexport const addNewCardServer = (nameCard, linkCard) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameCard,\r\n      link: linkCard,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Удаление карточки с сервера\r\nexport const deleteCardServer = (userId) => {\r\n  return fetch(`${config.baseUrl}/cards/${userId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n// Постановка лайка\r\nexport const addLikeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Снятие лайка\r\nexport const deleteLikeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n\r\n\r\n","\r\nimport { addLikeCardServer, deleteLikeCardServer, deleteCardServer } from './api.js';\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content;\r\n\r\nfunction createCard(item, userId, likeCard, showImage) {\r\n  const placesItem = cardTemplate.querySelector('.card').cloneNode(true)\r\n  const cardImage = placesItem.querySelector('.card__image')\r\n  const cardTitle = placesItem.querySelector('.card__title')\r\n  const cardDeleteButton = placesItem.querySelector('.card__delete-button')\r\n  const cardLikeButton = placesItem.querySelector('.card__like-button')\r\n  const likeCountElement = placesItem.querySelector('.card__like-count')\r\n  \r\n  placesItem.id = item['_id'];\r\n\r\n  cardImage.alt = item.name\r\n  cardImage.src = item.link\r\n  cardTitle.textContent = item.name\r\n  likeCountElement.textContent = item.likes.length;\r\n\r\n\r\n  const isLiked = item.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    cardLikeButton.classList.add('card__like-button_is-active');\r\n  }\r\n\r\n\r\n  cardImage.addEventListener('click', () => {\r\n    showImage(item.link, item.name);\r\n  })\r\n\r\n  cardLikeButton.addEventListener('click', (evt) => {\r\n    likeCard(evt, item._id);\r\n  })\r\n\r\n  if(item.owner._id === userId) {\r\n   cardDeleteButton.addEventListener('click', (evt) => {\r\n    deleteCard(evt, item._id);\r\n  });\r\n  } else {\r\n    cardDeleteButton.remove();\r\n  }\r\n\r\n  return placesItem;\r\n}\r\n\r\n\r\n//Функция удалния карточки\r\nfunction deleteCard(evt, userId) {\r\n  deleteCardServer(userId)\r\n    .then(() => {\r\n      const card = evt.target.closest('.card');\r\n      card.remove();\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n\r\n//Функция лайка\r\n\r\nconst likeCard = (evt, cardId) => {\r\n  const isLikes = evt.target.parentNode.querySelector('.card__like-count');\r\n  if (evt.target.classList.contains('card__like-button_is-active')) {\r\n    deleteLikeCardServer(cardId)\r\n      .then((data) => {\r\n        evt.target.classList.remove('card__like-button_is-active');\r\n        isLikes.textContent = data.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log('Ошибка', err);\r\n      });\r\n  } else {\r\n    addLikeCardServer(cardId)\r\n      .then((data) => {\r\n        evt.target.classList.add('card__like-button_is-active');\r\n        isLikes.textContent = data.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log('Ошибка', err);\r\n      });\r\n  }\r\n};\r\n\r\n\r\nexport {createCard, deleteCard, likeCard}","\r\n//Открываем модалку\r\nfunction openModal(modal) {\r\n  modal.classList.add('popup_is-opened')\r\n  document.addEventListener('keyup', closeEsc)\r\n} \r\n\r\n//Закрываем модалку\r\nfunction closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened')\r\n  document.removeEventListener('keyup', closeEsc)\r\n}\r\n\r\n\r\n//Закрываем по нажатию клавиши Esc\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector('.popup_is-opened')\r\n    closeModal(openedPopup)\r\n  }\r\n} \r\n\r\nexport {openModal, closeModal}","\r\n/*const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n\r\n    setEventListeners(\r\n      formElement,\r\n      validationConfig.inputSelector,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass,\r\n      validationConfig.submitButtonSelector,\r\n      validationConfig.inactiveButtonClass\r\n    );\r\n  });\r\n};\r\n\r\n\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.textContent = \"\";\r\n  errorElement.classList.remove(errorClass);\r\n};\r\n\r\nconst checkInputValidity = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      inputErrorClass,\r\n      errorClass\r\n    );\r\n  } else {\r\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (\r\n  formElement,\r\n  inputSelector,\r\n  inputErrorClass,\r\n  errorClass,\r\n  submitButtonSelector,\r\n  inactiveButtonClass\r\n) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n\r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      checkInputValidity(\r\n        formElement,\r\n        inputElement,\r\n        inputErrorClass,\r\n        errorClass\r\n      );\r\n      toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\nconst clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(\r\n    inputList,\r\n    buttonElement,\r\n    validationConfig.inactiveButtonClass\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(\r\n      formElement,\r\n      inputElement,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass\r\n    );\r\n    inputElement.setCustomValidity(\"\");\r\n  });\r\n};\r\n\r\nexport { enableValidation, clearValidation };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst showError = (formElement, inputElement, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add('.popup__input');\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add('.popup__error_visible');\r\n};\r\n\r\nconst hideError = (formElement, inputElement) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove('.popup__input');\r\n  errorElement.classList.remove('.popup__error_visible');\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  })\r\n};\r\n\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add('.popup__button_disabled');\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove('.popup__button_disabled');\r\n  }\r\n};\r\n\r\n\r\nconst checkInputValidity = (formElement, inputElement, config) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity('');\r\n  }\r\n  if (!inputElement.validity.valid) {\r\n    showError(formElement, inputElement, inputElement.validationMessage, config);\r\n  } else {\r\n    hideError(formElement, inputElement, config);\r\n  }\r\n};\r\n\r\n\r\nconst setEventListeners = (formElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'))\r\n  const buttonElement = formElement.querySelector('.popup__button');\r\n    toggleButtonState(inputList, buttonElement);\r\n    inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', function () {\r\n      checkInputValidity(formElement, inputElement);\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\n\r\nconst enableValidation = () => {\r\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\r\n  formList.forEach((formElement) => {\r\n  formElement.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  });\r\n  setEventListeners(formElement);\r\n  });\r\n};\r\n\r\n\r\nfunction clearValidation(formElement, settings) {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n\r\n\r\nexport {enableValidation, clearValidation}\r\n","\r\nimport './pages/index.css';\r\nimport { createCard, deleteCard, likeCard } from './scripts/card.js';\r\nimport { openModal, closeModal} from './scripts/modal.js';\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfileUser, addNewCardServer, updateAvatar, deleteCardServer} from './scripts/api.js';\r\n\r\n\r\n//Получаем элементы из DOM\r\n\r\nconst placesList = document.querySelector('.places__list');\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\nconst avatarPopup = document.querySelector('.popup_type_avatar');\r\nconst avatarForm = document.forms['update-avatar'];\r\nconst avatarInput = avatarForm.querySelector('.popup__input_type_avatar-url');\r\nconst avatarImage = document.querySelector('.profile__image');\r\n\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n};\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n};\r\n\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n};\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n};\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n};\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n};\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n};\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n};\r\n\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\nlet userId;\r\n\r\n\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n//Функция просмотра изображения\r\nfunction showImage(link, name) {\r\n  modalShowImage.image.src = link\r\n  modalShowImage.image.alt = name\r\n  modalShowImage.text.textContent = name\r\n  openModal(modals.showImage)\r\n}\r\n\r\n//Карточка\r\n\r\n//Добавление карточки\r\naddCardForm.form.addEventListener('submit', addNewCard);\r\n\r\n//Открываем по клику на кнопку \r\nmodalAddCard.openButton.addEventListener('click', () => {\r\n  openModal(modals.addNewCard)\r\n});\r\n\r\nconst addLoading = (isLoading, button) => {\r\n  button.textContent = isLoading ? 'Сохранение...' : 'Сохранить';\r\n};\r\n\r\n//Создаем новую карточку\r\nfunction addNewCard(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n  addLoading(true, modals.addNewCard.querySelector('.popup__button'));\r\n\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n  addNewCardServer(newCardData.name, newCardData.link)\r\n    .then((data) => {\r\n    const newCard = createCard(\r\n        data,\r\n        userId,\r\n        likeCard,\r\n        showImage,\r\n        deleteCard\r\n      );\r\n      placesList.prepend(newCard);\r\n    })\r\n    .catch((err) => {\r\n      console.log('Ошибка', err);\r\n    })\r\n    .finally(() => {\r\n      addLoading(false, addCardForm.form.querySelector('.popup__button'));\r\n      closeModal(modals.addNewCard);\r\n      addCardForm.form.reset();\r\n    });\r\n}\r\n\r\n\r\n//Профиль\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\n//Открываем по клику на кнопку \r\nmodalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm();\r\n})\r\n\r\n//Присваиваем поля форме профеля\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n  // Обработчик 'отправки' формы \r\n\r\nfunction submitEditForm(evt) {\r\n  evt.preventDefault();\r\n  addLoading(true, editForm.form.querySelector('.popup__button'));\r\n  updateProfileUser({\r\n    name: editForm.form.name.value,\r\n    about: editForm.form.description.value,\r\n  })\r\n    .then((res) => {\r\n      //Обновляем поля и закрываем форму\r\n      profile.name.textContent = editForm.nameInput.value\r\n      profile.description.textContent = editForm.jobInput.value\r\n      closeModal(modals.popupTypeEdit);\r\n    })\r\n    .catch((err) => {\r\n      console.log('Ошибка при загрузке данных:', err);\r\n    })\r\n    .finally(() => {\r\n      addLoading(false, editForm.form.querySelector('.popup__button'));\r\n    })\r\n};\r\n\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((card) => {\r\n      const cardElement = createCard(\r\n        card,\r\n        userId,\r\n        likeCard,\r\n        showImage\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log('Ошибка при загрузке данных:', err);\r\n  });\r\n\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\nenableValidation(validationConfig);"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","createCard","item","userId","likeCard","showImage","placesItem","cloneNode","cardImage","cardTitle","cardDeleteButton","cardLikeButton","likeCountElement","id","alt","name","src","link","textContent","likes","length","some","like","_id","classList","add","addEventListener","evt","owner","fetch","method","then","deleteCardServer","target","closest","remove","catch","err","console","log","deleteCard","cardId","isLikes","parentNode","contains","deleteLikeCardServer","data","addLikeCardServer","openModal","modal","closeEsc","closeModal","removeEventListener","key","hideError","formElement","inputElement","errorElement","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","placesList","popups","querySelectorAll","avatarPopup","avatarForm","forms","avatarInput","avatarImage","modals","popupTypeEdit","addNewCard","modalEdit","openButton","closeButton","modalAddCard","modalShowImage","image","text","addCardForm","form","url","profile","description","editForm","nameInput","jobInput","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","forEach","popup","currentTarget","preventDefault","addLoading","nameCard","linkCard","newCardData","value","body","JSON","stringify","newCard","prepend","finally","reset","isLoading","button","card","about","all","_ref","_ref2","userData","cards","style","backgroundImage","avatar","cardElement","append","settings","Array","from","avatarUrl","submitButton","submitter","originalText","patternMismatch","setCustomValidity","dataset","errorMessage","showError","validationMessage","checkInputValidity","setEventListeners"],"sourceRoot":""}