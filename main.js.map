{"version":3,"file":"main.js","mappings":"mBAwDO,SAASA,EAAUC,GACtBA,EAAaC,UAAUC,IAAI,mBAC3BC,SAASC,iBAAiB,UAAWC,EACzC,CAEO,SAASC,EAAWN,GACvBA,EAAaC,UAAUM,OAAO,mBAC9BJ,SAASK,oBAAoB,UAAWH,EAE5C,CASO,SAASA,EAAiBI,GAC7B,GAAgB,WAAZA,EAAIC,IAAkB,CACtB,IAAMV,EAAeG,SAASQ,cAAc,oBACxCX,GACAM,EAAWN,EAEnB,CACJ,CC6IO,SAASY,EAAWC,EAAMC,EAAYC,EAASC,EAAQC,GAC1D,IACMC,EADef,SAASQ,cAAc,kBAAkBQ,QAC5BR,cAAc,SAASS,WAAU,GAC7DC,EAAaH,EAAaP,cAAc,sBACxCW,EAAQJ,EAAaP,cAAc,gBACnCY,EAAYL,EAAaP,cAAc,gBAC7CY,EAAUC,YAAcX,EAAKY,MAAQZ,EAAKY,MAAMC,OAAS,EACzDR,EAAaP,cAAc,gBAAgBa,YAAcX,EAAKc,KAC9Cd,EAAKY,MAAMG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,MAAQd,CAAM,KAEvDK,EAAWpB,UAAUC,IAAI,+BAG7B,IAAM6B,EAAcb,EAAaP,cAAc,qBAuC/C,OAtCAO,EAAaP,cAAc,sBAAsBP,iBAAiB,SAAS,WACvE,IAAM4B,EAAcX,EAAWpB,UAAUgC,SAAS,+BAClDlB,EAAQF,EAAKiB,IAAKE,GACbE,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZd,EAAWpB,UAAUqC,OAAO,+BAC5Bf,EAAUC,YAAcW,EAAKV,MAAMC,MACvC,IACCa,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,GACR,IAIIxB,IAAWH,EAAK4B,MAAMX,IACtBZ,EAAaP,cAAc,wBAAwBV,UAAUM,OAAO,wBAEpEW,EAAaP,cAAc,wBAAwBP,iBAAiB,SAAS,WACzEL,EAAUgC,EACd,IACAb,EAAaP,cAAc,kBAAkBP,iBAAiB,SAAS,kBAAMU,EAAWD,EAAKiB,KACxFI,MAAK,WACFhB,EAAaX,QACjB,IACCgC,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,GAAE,KAIVlB,EAAMlB,iBAAiB,SAAS,WAC5Ba,EAAeJ,EAAK6B,KAAM7B,EAAKc,KACnC,IAGAL,EAAMqB,IAAM9B,EAAK6B,KACjBpB,EAAMsB,IAAM/B,EAAKc,KACVT,CACX,CC5BO,IAsBM2B,EAAiB,SAACC,EAAaC,EAAcC,GACtD,IAAMC,EAAeH,EAAYnC,cAAc,IAADuC,OAAKH,EAAaI,GAAE,WAClEJ,EAAa9C,UAAUM,OAAOyC,EAAiBI,YAC/CH,EAAazB,YAAc,GAC3ByB,EAAahD,UAAUM,OAAOyC,EAAiBK,gBACnD,EAGMC,EAAsB,SAACC,EAAQC,GACjCD,EAAOE,UAAW,EAClBF,EAAOtD,UAAUC,IAAIsD,EAAOE,oBAChC,EAgBaC,EAAoB,SAACC,EAAWC,EAAeb,GAbjC,IAACO,EAAQC,GAML,SAACI,GAC5B,OAAOA,EAAUhC,MAAK,SAACmB,GACnB,OAAQA,EAAae,SAASC,KAClC,GACJ,CAIQC,CAAgBJ,IAdYJ,EAiBMR,GAjBdO,EAiBDM,GAhBhBJ,UAAW,EAClBF,EAAOtD,UAAUM,OAAOiD,EAAOE,sBAa3BJ,EAAoBO,EAAeb,EAI3C,EAwBO,SAASiB,EAAgBnB,EAAaE,GACzC,IAAMY,EAAYM,MAAMC,KAAKrB,EAAYsB,iBAAiBpB,EAAiBqB,gBACrER,EAAgBf,EAAYnC,cAAcqC,EAAiBsB,sBAEjEV,EAAUW,SAAQ,SAACxB,GACfF,EAAeC,EAAaC,EAAcC,EAC9C,IAEAM,EAAoBO,EAAeb,EACvC,CC/UO,IAAMQ,EACF,4CADEA,EAGM,uCA0GNgB,EAAiB,SAACC,GAC3B,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OAAO,WAAD3B,OAAYuB,EAASK,QAC9C,EAwFahE,EAAa,SAACiE,GACvB,OAAOC,MAAM,GAAD9B,OAAIM,EAAc,WAAAN,OAAU6B,GAAU,CAC9CE,OAAQ,SACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,MAGrBtB,KAAKsC,EACd,EAGazD,EAAU,SAACgE,EAAQ/C,GAC5B,OAAOgD,MAAM,GAAD9B,OAAIM,EAAc,iBAAAN,OAAgB6B,GAAU,CACpDE,OAAQjD,EAAc,SAAW,MACjCkD,QAAS,CACLC,cAAe,GAAFjC,OAAKM,MAGrBtB,KAAKsC,EACd,E,sGCkwBA,IAAMY,EAAoBjF,SAASQ,cAAc,yBAC3C0E,EAAmBlF,SAASQ,cAAc,oBAC1C2E,EAAgBnF,SAASQ,cAAc,wBACvC4E,EAAepF,SAASQ,cAAc,wBACtC6E,EAAiBrF,SAASQ,cAAc,0BACxC8E,EAAStF,SAASQ,cAAc,mBAChC+E,EAAYvF,SAASQ,cAAc,2BACnCgF,EAAaxF,SAASQ,cAAc,kCACpCiF,EAAYzF,SAASQ,cAAc,mBACnCkF,EAAW1F,SAASQ,cAAc,yBAClCmF,EAAkB3F,SAASQ,cAAc,qCACzCoF,EAAc5F,SAASQ,cAAc,kCACrCqF,EAAa7F,SAASQ,cAAc,iBACpCsF,EAAiB9F,SAASQ,cAAc,qBACxCuF,EAAwB/F,SAASQ,cAAc,mBAC/CwF,EAAWhG,SAASQ,cAAc,iBAClCyF,EAAmBjG,SAASQ,cAAc,mCAC1C0F,EAAiBlG,SAASQ,cAAc,6BAYxCqC,EAAmB,CACrBsD,aAAc,eACdjC,cAAe,gBACfC,qBAAsB,iBACtBZ,oBAAqB,yBACrBL,gBAAiB,0BACjBD,WAAY,wBAgChB,SAASnC,EAAesF,EAAUC,GAC9BR,EAAWrD,IAAM4D,EACjBP,EAAWpD,IAAM4D,EACjBN,EAAsB1E,YAAcgF,EACpCzG,EAAUkG,EACd,CAjCAR,EAAOrF,iBAAiB,SAAS,WAC7B6D,EAAgB6B,EAAiB9C,GACjCjD,EAAUyF,EACd,IAGAF,EAAclF,iBAAiB,SAAS,WACpC6D,EAAgB8B,EAAa/C,GAC7BjD,EAAUwF,EACd,IAGAH,EAAkBhF,iBAAiB,SAAS,WACxC6D,EAAgB6B,EAAiB9C,GACjC0C,EAAUe,MAAQb,EAAUpE,YAC5BmE,EAAWc,MAAQZ,EAASrE,YAC5BzB,EAAUsF,EACd,IAGAlF,SAASC,iBAAiB,SAAS,SAAUK,GACrCA,EAAIiG,OAAOzG,UAAUgC,SAAS,iBAE9B3B,EADqBG,EAAIiG,OAAOC,QAAQ,UAGhD,IAWAxG,SAASC,iBAAiB,SJv+BnB,SAA2BK,GAC9B,IAAMT,EAAeG,SAASQ,cAAc,oBACxCF,EAAIiG,SAAW1G,GACfM,EAAWN,EAEnB,IEsPgC,SAACgD,GACZkB,MAAMC,KAAKhE,SAASiE,iBAAiBpB,EAAiBsD,eAC9D/B,SAAQ,SAACzB,IAfW,SAACA,EAAaE,GAC3C,IAAMY,EAAYM,MAAMC,KAAKrB,EAAYsB,iBAAiBpB,EAAiBqB,gBACrER,EAAgBf,EAAYnC,cAAcqC,EAAiBsB,sBACjEX,EAAkBC,EAAWC,EAAeb,GAC5CY,EAAUW,SAAQ,SAACxB,GACfA,EAAa3C,iBAAiB,SAAS,YA/DxB,SAAC0C,EAAaC,EAAcC,GAC3CD,EAAae,SAAS8C,gBACtB7D,EAAa8D,kBAAkB9D,EAAa+D,QAAQC,cAEpDhE,EAAa8D,kBAAkB,IAE9B9D,EAAae,SAASC,MAGvBlB,EAAeC,EAAaC,EAAcC,GAKpB,SAACF,EAAaC,EAAcgE,EAAc/D,GACpE,IAAMC,EAAeH,EAAYnC,cAAc,IAADuC,OAAKH,EAAaI,GAAE,WAClEJ,EAAa9C,UAAUC,IAAI8C,EAAiBI,YAC5CH,EAAazB,YAAcuF,EAC3B9D,EAAahD,UAAUC,IAAI8C,EAAiBK,gBAChD,CAZQ2D,CAAelE,EAAaC,EAAcA,EAAakE,kBAAmBjE,EAIlF,CAqDYkE,CAAQpE,EAAaC,EAAcC,GACnCW,EAAkBC,EAAWC,EAAeb,EAChD,GACJ,GACJ,CAMQmE,CAAkBrE,EAAaE,EACnC,GACJ,CE0uBAoE,CAAiBpE,GAGjBoD,EAAiBhG,iBAAiB,UAAU,SAAUK,GAClDA,EAAI4G,iBAEJ,ID97B6BC,EC87BvBzD,EAAgBuC,EAAiBzF,cAAc,kBACrDkD,EAAcrC,YAAc,gBAC5BqC,EAAcJ,UAAW,GDh8BI6D,ECi8BZjB,EDh8BVrB,MAAM,GAAD9B,OAAIoE,EAAIb,OAAS,CACzBxB,OAAQ,SAEP/C,MAAK,SAAAuC,GACGA,EAASC,IACVtC,QAAQC,IAAI,oBAEIoC,EAASS,QAAQqC,IAAI,gBACxBC,WAAW,WACxBpF,QAAQC,IAAI,4BAEpB,KCs7BCE,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,IDp7BmB,SAAC6D,GACxB,OAAOrB,MAAM,GAAD9B,OAAIM,EAAc,oBAAoB,CAC9CyB,OAAQ,QACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,GAClB,eAAgB,oBAEpBiE,KAAMC,KAAKC,UAAU,CACjBlC,OAAQ,GAAFvC,OAAKmD,EAAeI,WAG7BvE,KAAKsC,EACd,CCy6BIoD,CAAYvB,GACPnE,MAAK,SAACC,GACHsD,EAAOoC,MAAMC,gBAAkB,OAAH5E,OAAUf,EAAKsD,OAAM,IACrD,IACCsC,SAAQ,WACLlE,EAAcrC,YAAc,YAC5BqC,EAAcJ,UAAW,EACzBnD,EAAWkF,EACf,IACCjD,OAAM,SAACC,GACJJ,QAAQC,IAAI,UAAWG,EAC3B,GACR,IAGAsD,EAAgB1F,iBAAiB,UAAU,SAAUK,GACjDA,EAAI4G,iBAEJzB,EAAUpE,YAAckE,EAAUe,MAClCZ,EAASrE,YAAcmE,EAAWc,MAElC,ID37B0BuB,EAAUC,EC27B9BpE,EAAgBiC,EAAgBnF,cAAc,kBACpDkD,EAAcrC,YAAc,gBAC5BqC,EAAcJ,UAAW,GD77BCuE,EC+7BZtC,EAAUe,MD/7BYwB,EC+7BLtC,EAAWc,MD97BnCzB,MAAM,GAAD9B,OAAIM,EAAc,aAAa,CACvCyB,OAAQ,QACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,GAClB,eAAgB,oBAEpBiE,KAAMC,KAAKC,UAAU,CACjBhG,KAAMqG,EACNE,MAAOD,MAGV/F,KAAKsC,ICo7BLtC,MAAK,SAACC,GACHyD,EAAUpE,YAAcW,EAAKR,KAC7BkE,EAASrE,YAAcW,EAAK+F,KAChC,IACCH,SAAQ,WACLlE,EAAcrC,YAAc,YAC5BqC,EAAcJ,UAAW,EACzBnD,EAAW+E,EACf,IACC9C,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,GACR,IAGAuD,EAAY3F,iBAAiB,UAAU,SAAUK,GAC7CA,EAAI4G,iBAEJ,IDl8BoBc,EAAUC,ECk8BxBvE,EAAgBkC,EAAYpF,cAAc,kBAC1C0H,EAAO,CACT1G,KAAMxB,SAASQ,cAAc,gCAAgC8F,MAC7D/D,KAAMvC,SAASQ,cAAc,0BAA0B8F,OAE3D5C,EAAcrC,YAAc,gBAC5BqC,EAAcJ,UAAW,GDx8BL0E,EC08BZE,EAAK1G,KD18BiByG,EC08BXC,EAAK3F,KDz8BjBsC,MAAM,GAAD9B,OAAIM,EAAc,UAAU,CACpCyB,OAAQ,OACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,GAClB,eAAgB,oBAEpBiE,KAAMC,KAAKC,UAAU,CACjBhG,KAAMwG,EACNzF,KAAM0F,MAGTlG,KAAKsC,IC+7BLtC,MAAK,SAACC,GACH,IAAMmG,EAAU1H,EAAWuB,EACvBrB,EACAC,EACAoB,EAAKM,MAAMX,IACXb,GACJkF,EAASoC,QAAQD,EACrB,IACCP,SAAQ,WACLlE,EAAcrC,YAAc,YAC5BqC,EAAcJ,UAAW,EACzBsC,EAAYyC,QACZlI,EAAWiF,EACf,IACChD,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,GACR,IAEA,IAAMiG,EAAW,CD78BNzD,MAAM,GAAD9B,OAAIM,EAAc,aAAa,CACvCyB,OAAQ,MACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,MAGrBtB,KAAKsC,GAKHQ,MAAM,GAAD9B,OAAIM,EAAc,UAAU,CACpCyB,OAAQ,MACRC,QAAS,CACLC,cAAe,GAAFjC,OAAKM,MAGrBtB,KAAKsC,IC67BdI,QAAQ8D,IAAID,GACPvG,MAAK,SAAAyG,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBE,EAAQD,EAAA,GAAEE,EAAKF,EAAA,GACnBzI,SAASQ,cAAc,mBAAmBkH,MAAMC,gBAAkB,OAAH5E,OAAU2F,EAASpD,OAAM,KACxFG,EAAUpE,YAAcqH,EAASlH,KACjCkE,EAASrE,YAAcqH,EAASX,MAChC,IAAMlH,EAAS6H,EAAS/G,IACxBgH,EAAMvE,SAAQ,SAAU8D,GACpB,IAAMC,EAAU1H,EAAWyH,EAAMvH,EAAYC,EAASC,EAAQC,GAC9DkF,EAAS4C,OAAOT,EACpB,GACJ,IACC/F,OAAM,SAACC,GACJJ,QAAQC,IAAI,SAAUG,EAC1B,G","sources":["webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["//Открываем модалку\r\n/*function openModal(modal) {\r\n  modal.classList.add('popup_is-opened')\r\n  document.addEventListener('keyup', closeEsc)\r\n} \r\n\r\n//Закрываем по нажатию клавиши Esc\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector('.popup_is-opened')\r\n    closeModal(openedPopup)\r\n  }\r\n} \r\n\r\n//Закрываем модалку\r\nfunction closeModal(modal) {\r\n  modal.classList.remove('popup_is-opened')\r\n  document.removeEventListener('keyup', closeEsc)\r\n}\r\n\r\nexport {openModal, closeModal}*/\r\n\r\n\r\n\r\n\r\n\r\n// Function to open popup\r\n/*export function openPopup(popup) {\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closeByEscape); // Добавляем слушатель при открытии\r\n}\r\n\r\n// Function to close popup\r\nexport function closePopup(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeByEscape); // Удаляем слушатель при закрытии\r\n}\r\n\r\nfunction closeByEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    closePopup(openedPopup);\r\n  }\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Открыть модальное окно.\r\nexport function openModal(currentModal) {\r\n    currentModal.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', closeModalEscape);\r\n};\r\n// Закрыть модальное окно.\r\nexport function closeModal(currentModal) {\r\n    currentModal.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', closeModalEscape);\r\n\r\n};\r\n// Закрыть модальное окно по оверлею.\r\nexport function closeModalOverlay(evt) {\r\n    const currentModal = document.querySelector('.popup_is-opened');\r\n    if (evt.target === currentModal) {\r\n        closeModal(currentModal);\r\n    }\r\n};\r\n// Закрыть модальное окно по Escape.\r\nexport function closeModalEscape(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const currentModal = document.querySelector('.popup_is-opened');\r\n        if (currentModal) {\r\n            closeModal(currentModal);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*function openModal(modal) {\r\n  modal.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closeEsc);\r\n}\r\n\r\nfunction closeModal(modal) {\r\n  modal.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeEsc);\r\n}\r\n\r\nfunction closeEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    closeModal(openedPopup);\r\n  }\r\n}\r\n\r\nexport { openModal, closeModal };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*function openModal(popup) {\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", handleEscClose);\r\n}\r\n\r\nfunction closeModal(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", handleEscClose);\r\n}\r\n\r\nfunction handleEscClose(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const popupOpened = document.querySelector(\".popup_is-opened\");\r\n    closeModal(popupOpened);\r\n  }\r\n}\r\n\r\nexport { openModal, closeModal };*/","\r\n/*import { likeCardServer, unlikeCard } from \"./api.js\";\r\n\r\n\r\nfunction createCard(cardTemplate, cardData, deleteCard, likeCard, showImage) {\r\n  \r\n  const placesItem = cardTemplate.content.cloneNode(true)\r\n  const card = placesItem.querySelector('.card')\r\n  const cardImage = card.querySelector('.card__image')\r\n  const cardTitle = card.querySelector('.card__title')\r\n  const cardDeleteButton = card.querySelector('.card__delete-button')\r\n  const cardLikeButton = card.querySelector('.card__like-button')\r\n  const likeCountElement = placesItem.querySelector('.card__like-count')\r\n\r\n\r\n  cardImage.alt = cardData.name\r\n  cardImage.src = cardData.link\r\n  cardTitle.textContent = cardData.name\r\n\r\n  \r\n  cardImage.addEventListener('click', () => {\r\n    showImage(cardData.link, cardData.name)\r\n  })\r\n\r\n  cardLikeButton.addEventListener('click', () => {\r\n    likeCard(cardLikeButton, cardData._id, likeCountElement)\r\n  })\r\n\r\n  cardDeleteButton.addEventListener('click', () => {\r\n    deleteCard(card)\r\n  })\r\n\r\n  return placesItem;\r\n}\r\n\r\n\r\n//Удаление карточки\r\nfunction deleteCard(element) {\r\n    if (element && element.remove) {\r\n      element.remove()\r\n    }\r\n}\r\n\r\n//Функция лайка\r\nfunction likeCard(element) {\r\n  element.classList.toggle('card__like-button_is-active')\r\n}\r\n\r\nexport {deleteCard, likeCard, createCard};*/\r\n\r\n\r\n\r\n\r\n/*import { likeCardServer, unlikeCard } from \"./api.js\";\r\n\r\n// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector(\"#card-template\").content,\r\n      templateCard = cardTemplate.querySelector(\".card\");\r\n\r\n// @todo: Функция создания карточки\r\nconst createCard = function (item, userId, deleteCard, likeCard, showImage) {\r\n  const newCards = templateCard.cloneNode(true),\r\n    cardImage = newCards.querySelector(\".card__image\"),\r\n    cardTitle = newCards.querySelector(\".card__title\"),\r\n    deleteButton = newCards.querySelector(\".card__delete-button\"),\r\n    likeButton = newCards.querySelector(\".card__like-button\"),\r\n    cardLikeCount = newCards.querySelector(\".card__like-count\");\r\n\r\n  newCards.id = item[\"_id\"];\r\n\r\n  cardImage.setAttribute(\"src\", item.link);\r\n  cardImage.setAttribute(\"alt\", item.name);\r\n  cardTitle.textContent = item.name;\r\n  cardLikeCount.textContent = item.likes.length;\r\n\r\n  const isLiked = item.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  if (item.owner._id === userId) {\r\n    deleteButton.addEventListener(\"click\", (evt) => {\r\n      deleteCard(evt, item._id);\r\n    });\r\n  } else {\r\n    deleteButton.remove();\r\n  }\r\n\r\n  likeButton.addEventListener(\"click\", (evt) => {\r\n    likeCard(evt, item._id);\r\n  });\r\n\r\n  cardImage.addEventListener(\"click\", function () {\r\n    showImage(item);\r\n  });\r\n\r\n  return newCards;\r\n};\r\n\r\n\r\n\r\nconst likeCard = (evt, cardId) => {\r\n  const currentLikes = evt.target.parentNode.querySelector(\".card__like-count\");\r\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\r\n    unlikeCard(cardId)\r\n      .then((deleteCardServer) => {\r\n        evt.target.classList.remove(\"card__like-button_is-active\");\r\n        currentLikes.textContent = deleteCardServer.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } else {\r\n    likeCardServer(cardId)\r\n      .then((deleteCardServer) => {\r\n        evt.target.classList.add(\"card__like-button_is-active\");\r\n        currentLikes.textContent = deleteCardServer.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });  \r\n  }\r\n};\r\n\r\n//Удаление карточки\r\nfunction deleteCard(element) {\r\n    if (element && element.remove) {\r\n      element.remove()\r\n    }\r\n};\r\n\r\n\r\nexport { createCard, likeCard, deleteCard };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { addLike, deleteLike } from \"./api.js\";\r\n\r\n// @todo: Темплейт карточки\r\nconst content = document.querySelector(\"#card-template\").content,\r\n  templateCard = content.querySelector(\".card\");\r\n\r\n// @todo: Функция создания карточки\r\nconst createCard = function (\r\n  item,\r\n  userId,\r\n  removeCard,\r\n  likeCard,\r\n  openPopupImage\r\n) {\r\n  const newCard = templateCard.cloneNode(true),\r\n    cardImage = newCard.querySelector(\".card__image\"),\r\n    cardTitle = newCard.querySelector(\".card__title\"),\r\n    deleteButton = newCard.querySelector(\".card__delete-button\"),\r\n    likeButton = newCard.querySelector(\".card__like-button\"),\r\n    cardLikeCount = newCard.querySelector(\".card__like-count\");\r\n\r\n  newCard.id = item[\"_id\"];\r\n\r\n  cardImage.setAttribute(\"src\", item.link);\r\n  cardImage.setAttribute(\"alt\", item.name);\r\n  cardTitle.textContent = item.name;\r\n  cardLikeCount.textContent = item.likes.length;\r\n\r\n  const isLiked = item.likes.some((like) => like._id === userId);\r\n  if (isLiked) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  if (item.owner._id === userId) {\r\n    deleteButton.addEventListener(\"click\", (evt) => {\r\n      removeCard(evt, item._id);\r\n    });\r\n  } else {\r\n    deleteButton.remove();\r\n  }\r\n\r\n  likeButton.addEventListener(\"click\", (evt) => {\r\n    likeCard(evt, item._id);\r\n  });\r\n\r\n  cardImage.addEventListener(\"click\", function () {\r\n    openPopupImage(item);\r\n  });\r\n\r\n  return newCard;\r\n};\r\n\r\nconst likeCard = (evt, cardId) => {\r\n  const currentLikes = evt.target.parentNode.querySelector(\".card__like-count\");\r\n  if (evt.target.classList.contains(\"card__like-button_is-active\")) {\r\n    deleteLike(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.remove(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } else {\r\n    addLike(cardId)\r\n      .then((updatedCard) => {\r\n        evt.target.classList.add(\"card__like-button_is-active\");\r\n        currentLikes.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};\r\n\r\nexport { createCard, likeCard };*/\r\n\r\n\r\n\r\n\r\nimport { openModal } from \"./modal.js\";\r\n\r\n// Функция создания карточки.\r\nexport function createCard(card, deleteCard, addLike, userId, openPopupImage) {\r\n    const templateList = document.querySelector('#card-template').content;\r\n    const templateCard = templateList.querySelector('.card').cloneNode(true);\r\n    const likeButton = templateCard.querySelector('.card__like-button');\r\n    const image = templateCard.querySelector('.card__image');\r\n    const likeCount = templateCard.querySelector('.card__count');\r\n    likeCount.textContent = card.likes ? card.likes.length : 0;\r\n    templateCard.querySelector('.card__title').textContent = card.name;\r\n    const isLiked = card.likes.some(like => like._id === userId);\r\n    if (isLiked) {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n    }\r\n    \r\n    const popupDelete = templateCard.querySelector('.popup_type_trash');\r\n    templateCard.querySelector('.card__like-button').addEventListener('click', () => {\r\n        const currentLike = likeButton.classList.contains('card__like-button_is-active');\r\n        addLike(card._id, currentLike)\r\n            .then((data) => {\r\n                console.log(data)\r\n                likeButton.classList.toggle('card__like-button_is-active');\r\n                likeCount.textContent = data.likes.length;\r\n            })\r\n            .catch((error) => {\r\n                console.log('Ошибка', error);\r\n            })\r\n    }\r\n    );\r\n\r\n    // Проверка идентификатора пользователя с остальными пользователями.\r\n    if (userId !== card.owner._id) {\r\n        templateCard.querySelector('.card__delete-button').classList.remove('card__delete-button');\r\n    } else {\r\n        templateCard.querySelector('.card__delete-button').addEventListener('click', function () {\r\n            openModal(popupDelete);\r\n        })\r\n        templateCard.querySelector('.popup__button').addEventListener('click', () => deleteCard(card._id)\r\n            .then(() => {\r\n                templateCard.remove();\r\n            })\r\n            .catch((error) => {\r\n                console.log('Ошибка', error);\r\n            })\r\n        )\r\n    }\r\n\r\n    image.addEventListener('click', function () {\r\n        openPopupImage(card.link, card.name)\r\n    })\r\n\r\n    // Создание мелких карточек на сайте.\r\n    image.src = card.link;\r\n    image.alt = card.name;\r\n    return templateCard;\r\n};\r\n","\r\n/*const showError = (formElement, inputElement, errorMessage) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add('.popup__input');\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add('.popup__error_visible');\r\n};\r\n\r\nconst hideError = (formElement, inputElement) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove('.popup__input');\r\n  errorElement.classList.remove('.popup__error_visible');\r\n  errorElement.textContent = '';\r\n};\r\n\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  })\r\n};\r\n\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add('.popup__button_disabled');\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove('.popup__button_disabled');\r\n  }\r\n};\r\n\r\n\r\nconst checkInputValidity = (formElement, inputElement, config) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity('');\r\n  }\r\n  if (!inputElement.validity.valid) {\r\n    showError(formElement, inputElement, inputElement.validationMessage, config);\r\n  } else {\r\n    hideError(formElement, inputElement, config);\r\n  }\r\n};\r\n\r\n\r\nconst setEventListeners = (formElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'))\r\n  const buttonElement = formElement.querySelector('.popup__button');\r\n    toggleButtonState(inputList, buttonElement);\r\n    inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener('input', function () {\r\n      checkInputValidity(formElement, inputElement);\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\n\r\nconst enableValidation = () => {\r\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\r\n  formList.forEach((formElement) => {\r\n  formElement.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  });\r\n  setEventListeners(formElement);\r\n  });\r\n};\r\n\r\n\r\nfunction clearValidation(formElement, settings) {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    settings.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideError(formElement, inputElement, settings);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, settings);\r\n}\r\n\r\n\r\nexport {enableValidation, clearValidation}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n\r\n    setEventListeners(\r\n      formElement,\r\n      validationConfig.inputSelector,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass,\r\n      validationConfig.submitButtonSelector,\r\n      validationConfig.inactiveButtonClass\r\n    );\r\n  });\r\n};\r\n\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.textContent = \"\";\r\n  errorElement.classList.remove(errorClass);\r\n};\r\n\r\nconst checkInputValidity = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      inputErrorClass,\r\n      errorClass\r\n    );\r\n  } else {\r\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (\r\n  formElement,\r\n  inputSelector,\r\n  inputErrorClass,\r\n  errorClass,\r\n  submitButtonSelector,\r\n  inactiveButtonClass\r\n) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n\r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      checkInputValidity(\r\n        formElement,\r\n        inputElement,\r\n        inputErrorClass,\r\n        errorClass\r\n      );\r\n      toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\nconst clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(\r\n    inputList,\r\n    buttonElement,\r\n    validationConfig.inactiveButtonClass\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(\r\n      formElement,\r\n      inputElement,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass\r\n    );\r\n    inputElement.setCustomValidity(\"\");\r\n  });\r\n};\r\n\r\nexport { enableValidation, clearValidation };*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Проверка валидации.\r\nexport const isValid = (formElement, inputElement, configValidation) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    } else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n    if (!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, configValidation);\r\n    } else {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    }\r\n};\r\n\r\n// Функция отображения ошибок валидации.\r\nexport const showInputError = (formElement, inputElement, errorMessage, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.add(configValidation.errorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(configValidation.inputErrorClass);\r\n};\r\n\r\n// Функция скрытия ошибок валидации.\r\nexport const hideInputError = (formElement, inputElement, configValidation) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(configValidation.errorClass);\r\n    errorElement.textContent = '';\r\n    errorElement.classList.remove(configValidation.inputErrorClass);\r\n};\r\n\r\n// Функция отключения кнопки.\r\nconst disableSubmitButton = (button, config) => {\r\n    button.disabled = true;\r\n    button.classList.add(config.inactiveButtonClass);\r\n};\r\n\r\n// Функция включения кнопок.\r\nconst enableSubmitButton = (button, config) => {\r\n    button.disabled = false;\r\n    button.classList.remove(config.inactiveButtonClass);\r\n};\r\n\r\n// Проверка на не валидность хотя бы одного поля ввода.\r\nexport const hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n        return !inputElement.validity.valid;\r\n    })\r\n};\r\n\r\n// Проверка на включение и выключение кнопки.\r\nexport const toggleButtonState = (inputList, buttonElement, configValidation) => {\r\n    if (hasInvalidInput(inputList)) {\r\n        disableSubmitButton(buttonElement, configValidation);\r\n    } else {\r\n        enableSubmitButton(buttonElement, configValidation);\r\n    }\r\n};\r\n\r\n// Поиск всех полей ввода и кнопки обход всех полей ввода и добавление слушателей.\r\nexport const setEventListeners = (formElement, configValidation) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\r\n    toggleButtonState(inputList, buttonElement, configValidation);\r\n    inputList.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n            isValid(formElement, inputElement, configValidation);\r\n            toggleButtonState(inputList, buttonElement, configValidation);\r\n        });\r\n    });\r\n};\r\n\r\n// Поиск всех форм на странице и передача их функции слушателю полей.\r\nexport const enableValidation = (configValidation) => {\r\n    const formList = Array.from(document.querySelectorAll(configValidation.formSelector));\r\n    formList.forEach((formElement) => {\r\n        setEventListeners(formElement, configValidation);\r\n    });\r\n};\r\n\r\n// Функция очистки полей валидации.\r\nexport function clearValidation(formElement, configValidation) {\r\n    const inputList = Array.from(formElement.querySelectorAll(configValidation.inputSelector));\r\n    const buttonElement = formElement.querySelector(configValidation.submitButtonSelector);\r\n\r\n    inputList.forEach((inputElement) => {\r\n        hideInputError(formElement, inputElement, configValidation);\r\n    });\r\n\r\n    disableSubmitButton(buttonElement, configValidation);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n\r\n    setEventListeners(\r\n      formElement,\r\n      validationConfig.inputSelector,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass,\r\n      validationConfig.submitButtonSelector,\r\n      validationConfig.inactiveButtonClass\r\n    );\r\n  });\r\n};\r\n\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(errorClass);\r\n};\r\n\r\nconst hideInputError = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.textContent = \"\";\r\n  errorElement.classList.remove(errorClass);\r\n};\r\n\r\nconst checkInputValidity = (\r\n  formElement,\r\n  inputElement,\r\n  inputErrorClass,\r\n  errorClass\r\n) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      inputErrorClass,\r\n      errorClass\r\n    );\r\n  } else {\r\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (\r\n  formElement,\r\n  inputSelector,\r\n  inputErrorClass,\r\n  errorClass,\r\n  submitButtonSelector,\r\n  inactiveButtonClass\r\n) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n\r\n  const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      checkInputValidity(\r\n        formElement,\r\n        inputElement,\r\n        inputErrorClass,\r\n        errorClass\r\n      );\r\n      toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\nconst clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(\r\n    inputList,\r\n    buttonElement,\r\n    validationConfig.inactiveButtonClass\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(\r\n      formElement,\r\n      inputElement,\r\n      validationConfig.inputErrorClass,\r\n      validationConfig.errorClass\r\n    );\r\n    inputElement.setCustomValidity(\"\");\r\n  });\r\n};\r\n\r\nexport { enableValidation, clearValidation };*/\r\n\r\n","export const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-39\",\r\n  headers: {\r\n    authorization: \"4d843643-f9b3-4126-9ca7-8baba1b4cfdc\",\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n};\r\n\r\n// Создаем общую функцию для ошибки\r\n/*function checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n\r\n// Загрузка с сервера карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n\r\n// Загрузка с сервера информации о пользователе\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  })\r\n   .then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Обновление профиля методом PATCH\r\nexport const updateProfile = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n\r\n\r\n// Добавление новой карточки на сервер\r\nexport const addNewCardServer = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Удаление карточки с сервера\r\nexport const deleteCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Постановка лайка\r\nexport const likeCardServer = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Снятие лайка\r\nexport const unlikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  })\r\n  .then(checkResponse);\r\n};\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  })\r\n  .then(checkResponse);\r\n};*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Функция для проверки обьекта ответа.\r\nexport const handleResponse = (response) => {\r\n    if (response.ok) {\r\n        return response.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${response.status}`);\r\n};\r\n\r\n// Проверка фотографии для подтверждения.\r\nexport const updatePhotoCheck = (url) => {\r\n    return fetch(`${url.value}`, {\r\n        method: 'HEAD',\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                console.log('Произошла ошибка');\r\n            }\r\n            const contentType = response.headers.get('Content-Type');\r\n            if (!contentType.startsWith('image/')) {\r\n                console.log('URL не является картинкой');\r\n            }\r\n        })\r\n};\r\n\r\n// Обновление фотографии пользователя на сайте.\r\nexport const updatePhoto = (newAvatarPhoto) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            avatar: `${newAvatarPhoto.value}`\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Редактирование имени и деятельности пользователя в профиле.\r\nexport const updateProfile = (nameData, aboutData,) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameData,\r\n            about: aboutData,\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Добавление карточки на сайт.\r\nexport const addCard = (nameCard, linkCard) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'POST',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            name: nameCard,\r\n            link: linkCard,\r\n        })\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Загрузка информации о пользователе с сервера.\r\nexport const getUserData = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Загрузка карточек с сервера.\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: 'GET',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Удаление карточки по нажатию.\r\nexport const deleteCard = (cardId) => {\r\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};\r\n\r\n// Функция добавления лайка на к арточку.\r\nexport const addLike = (cardId, currentLike) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: currentLike ? 'DELETE' : 'PUT',\r\n        headers: {\r\n            authorization: `${config.headers.authorization}`,\r\n        }\r\n    })\r\n        .then(handleResponse)\r\n};  \r\n\r\n\r\n\r\n\r\n/*const checkResponse = (res) => {\r\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\nconst getUserInfo = async () => {\r\n  return fetch(config.baseUrl + \"/users/me\", {\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst updateProfile = async (user) => {\r\n  return fetch(config.baseUrl + \"/users/me\", {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: user.name,\r\n      about: user.about,\r\n    }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst updateAvatar = async (link) => {\r\n  return fetch(config.baseUrl + \"/users/me/avatar\", {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: link,\r\n    }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst getInitialCards = async () => {\r\n  return fetch(config.baseUrl + \"/cards\", {\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst addNewCardServer = async (card) => {\r\n  return fetch(config.baseUrl + \"/cards\", {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: card.name,\r\n      link: card.link,\r\n    }),\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst deleteCardServer = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst likeCardServer = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nconst unlikeCard = async (cardId) => {\r\n  return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then((res) => checkResponse(res));\r\n};\r\n\r\nexport {\r\n  getUserInfo,\r\n  updateProfile,\r\n  updateAvatar,\r\n  getInitialCards,\r\n  addNewCardServer,\r\n  deleteCardServer,\r\n  likeCardServer,\r\n  unlikeCard,\r\n};*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n/*import './pages/index.css';\r\nimport { createCard, likeCard, deleteCard } from './scripts/card.js';\r\nimport { openModal, closeModal} from './scripts/modal.js';\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfile, addNewCardServer, updateAvatar} from './scripts/api.js';\r\n\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\nlet userId;\r\n\r\n//Получаем элементы из DOM\r\nconst cardTemplate = document.querySelector('#card-template');\r\nconst placesList = document.querySelector('.places__list');\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\nconst avatarPopup = document.querySelector(\".popup_type_avatar\");\r\nconst avatarForm = document.forms[\"update-avatar\"];\r\nconst avatarInput = avatarForm.querySelector(\".popup__input_type_avatar-url\");\r\nconst avatarImage = document.querySelector(\".profile__image\");\r\n\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n};\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n};\r\n\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n};\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n};\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n};\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n};\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n};\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n};\r\n\r\n\r\n//Прослушиватели\r\n\r\n//Открываем по клику на кнопку\r\nmodalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm()\r\n})\r\n\r\nmodalEdit.openButton.addEventListener(\"click\", () => {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n  clearValidation(editForm.form, validationConfig);\r\n  openModal(modals.popupTypeEdit);\r\n});\r\n\r\nmodalAddCard.openButton.addEventListener(\"click\", () => {\r\n  forms.addNewCard.reset();\r\n  clearValidation(forms.addNewCard, validationConfig);\r\n  openModal(modals.addNewCard);\r\n});\r\nmodalAddCard.openButton.addEventListener('click', () => {\r\n  openModal(modals.addNewCard)\r\n})\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\nforms.addNewCard.addEventListener('submit', (evt) => {\r\n  addNewCard(evt, cardTemplate, showImage, closeModal)\r\n});\r\n\r\n/*forms.addNewCard.addEventListener('submit', (evt) => {\r\n  addNewCard(evt, cardTemplate, showImage, closeModal)\r\n\r\n   addNewCardServer(addCardForm.name.value, addCardForm.url.value)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(\r\n        cardData,\r\n        deleteCard,\r\n        likeCard,\r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.prepend(cardElement);\r\n      closePopup(modals.addNewCard);\r\n      forms.addNewCard.reset();\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});*/\r\n\r\n\r\n\r\n//Функция просмотра изображения\r\n/*function showImage(item) {\r\n  modalShowImage.image.src = item.link;\r\n  modalShowImage.image.alt = item.name;\r\n  modalShowImage.text.textContent = item.name;\r\n  openModal(modals.showImage);\r\n}\r\n\r\n\r\n//Создаем новую карточку\r\nfunction addNewCard(evt, cardTemplate, showImage, closeModal) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault()\r\n\r\n  //Объект с данными новой карточки\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n //Новая карточка\r\n  const newCard = createCard(\r\n    cardTemplate, \r\n    likeCard, \r\n    item,\r\n    userId, \r\n    deleteCard, \r\n    showImage\r\n  )\r\n  \r\n  placesList.prepend(newCard)\r\n  addCardForm.form.reset()\r\n  closeModal(modals.addNewCard)\r\n}\r\n\r\n\r\n//Присваиваем поля форме\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n// Обработчик 'отправки' формы\r\nfunction submitEditForm(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n\r\n  //Обновляем поля и закрываем форму\r\n  profile.name.textContent = editForm.nameInput.value\r\n  profile.description.textContent = editForm.jobInput.value\r\n    \r\n  closeModal(modals.popupTypeEdit)\r\n}\r\n\r\n\r\n\r\n/*forms.addNewCard.addEventListener('submit', (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  addNewCardServer(addCardForm.name.value, addCardForm.url.value)\r\n    .then((item) => {\r\n      const cardElement = createCard(\r\n        item,\r\n        deleteCard,\r\n        likeCard,\r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.prepend(cardElement);\r\n      closePopup(modals.addNewCard);\r\n      forms.addNewCard.reset();\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});*/\r\n\r\n\r\n// Close buttons\r\n/*document.querySelectorAll(\".popup__close\").forEach((button) => {\r\n  button.addEventListener(\"click\", () => {\r\n    const popup = button.closest(\".popup\");\r\n    closeModal(popup);\r\n  });\r\n});*/\r\n\r\n/*Promise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((cardData) => {\r\n      const cardElement = createCard(\r\n        cardData,\r\n        deleteCard, \r\n        likeCard, \r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка при загрузке данных:\", err);\r\n  })\r\n\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\nenableValidation(validationConfig);*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import './pages/index.css';\r\nimport { createCard } from './scripts/card.js';\r\nimport { openModal, closeModal, closeModalOverlay } from './scripts/modal.js';\r\nimport { enableValidation, clearValidation } from './scripts/validation.js';\r\nimport { updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, getInitialCards, deleteCard, addLike } from './scripts/api.js';\r\n\r\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\r\nconst popupEditProfile = document.querySelector('.popup_type_edit');\r\nconst buttonAddCard = document.querySelector('.profile__add-button');\r\nconst popupAddCard = document.querySelector('.popup_type_new-card');\r\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\r\nconst avatar = document.querySelector('.profile__image');\r\nconst nameInput = document.querySelector('.popup__input_type_name');\r\nconst aboutInput = document.querySelector('.popup__input_type_description');\r\nconst nameTitle = document.querySelector('.profile__title');\r\nconst jobTitle = document.querySelector('.profile__description');\r\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\r\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\r\nconst popupImage = document.querySelector('.popup__image');\r\nconst popupImageOpen = document.querySelector('.popup_type_image');\r\nconst popupImageDescription = document.querySelector('.popup__caption');\r\nconst cardList = document.querySelector('.places__list');\r\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\r\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\r\n\r\n/**\r\n * Объект опции:\r\n * 1. Элемент формы.\r\n * 2. Элемент поля ввода.\r\n * 3. Кнопка отправки формы.\r\n * 4. Класс для отключения кнопки.\r\n * 5. Класс для выделения попапа цветом.\r\n * 6. Класс для отображения попапа.\r\n */\r\n\r\n/*const configValidation = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__error_visible',\r\n};\r\n\r\n// Открытие модального окна по нажатию на аватарку. \r\navatar.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    openModal(popupNewAvatar);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку добавления карточки.\r\nbuttonAddCard.addEventListener('click', function () {\r\n    clearValidation(formAddCard, configValidation);\r\n    openModal(popupAddCard);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\r\nbuttonEditProfile.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    nameInput.value = nameTitle.textContent;\r\n    aboutInput.value = jobTitle.textContent;\r\n    openModal(popupEditProfile);\r\n});\r\n\r\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\r\ndocument.addEventListener('click', function (evt) {\r\n    if (evt.target.classList.contains('popup__close')) {\r\n        const currentModal = evt.target.closest('.popup');\r\n        closeModal(currentModal);\r\n    }\r\n});\r\n\r\n// Открытие модального окна с изображением.\r\nfunction openPopupImage(imageSrc, imageAlt) {\r\n    popupImage.src = imageSrc;\r\n    popupImage.alt = imageAlt;\r\n    popupImageDescription.textContent = imageAlt;\r\n    openModal(popupImageOpen);\r\n};\r\n\r\n// Закрытие модального окна по оверлею.\r\ndocument.addEventListener('click', closeModalOverlay);\r\n\r\n// Запуск функции поиска всех форм на странице.\r\nenableValidation(configValidation);\r\n\r\n// Обновление фотографии.\r\nformPhotoProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n    updatePhotoCheck(newAvatarPhoto)\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n    updatePhoto(newAvatarPhoto)\r\n        .then((data) => {\r\n            avatar.style.backgroundImage = `url(${data.avatar})`;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\";\r\n            buttonElement.disabled = false;\r\n            closeModal(popupNewAvatar);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка:', error);\r\n        })\r\n});\r\n\r\n// Редактирование профиля.\r\nformEditProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    nameTitle.textContent = nameInput.value;\r\n    jobTitle.textContent = aboutInput.value;\r\n\r\n    const buttonElement = formEditProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\"\r\n    buttonElement.disabled = true;\r\n\r\n    updateProfile(nameInput.value, aboutInput.value)\r\n        .then((data) => {\r\n            nameTitle.textContent = data.name;\r\n            jobTitle.textContent = data.about;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            closeModal(popupEditProfile);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\n// Добавление карточки.\r\nformAddCard.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formAddCard.querySelector('.popup__button');\r\n    const item = {\r\n        name: document.querySelector('.popup__input_type_card-name').value,\r\n        link: document.querySelector('.popup__input_type_url').value,\r\n    }\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n\r\n    addCard(item.name, item.link)\r\n        .then((data) => {\r\n            const newCard = createCard(data,\r\n                deleteCard,\r\n                addLike,\r\n                data.owner._id,\r\n                openPopupImage);\r\n            cardList.prepend(newCard);\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            formAddCard.reset();\r\n            closeModal(popupAddCard);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\nconst promises = [getUserData(), getInitialCards()];\r\nPromise.all(promises)\r\n    .then(([userData, getInitialCards]) => {\r\n        document.querySelector('.profile__image').style.backgroundImage = `url(${userData.avatar})`;\r\n        nameTitle.textContent = userData.name;\r\n        jobTitle.textContent = userData.about;\r\n        const userId = userData._id;\r\n        getInitialCards.forEach(function (item) {\r\n            const newCard = createCard(item, deleteCard, addLike, userId, openPopupImage);\r\n            cardList.append(newCard);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.log('Ошибка', error);\r\n    });*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import \"./pages/index.css\";\r\nimport { createCard, likeCard } from \"./scripts/card.js\";\r\nimport { openModal, closeModal } from \"./scripts/modal.js\";\r\nimport { enableValidation, clearValidation } from \"./scripts/validation.js\";\r\nimport {\r\n  getInitialUser,\r\n  updateUser,\r\n  updateUserAvatar,\r\n  getInitialCards,\r\n  addCard,\r\n  deleteCard,\r\n} from \"./scripts/api.js\";\r\n// @todo: DOM узлы\r\nconst popups = Array.from(document.querySelectorAll(\".popup\"));\r\nconst placesList = document.querySelector(\".places__list\");\r\n\r\nconst popupCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupProfile = document.querySelector(\".popup_type_edit\");\r\nconst popupAvatar = document.querySelector(\".popup_type_avatar\");\r\nconst popupConfirm = document.querySelector(\".popup_type_confirm\");\r\n\r\nconst popupFormEditProfile = document.forms[\"edit-profile\"];\r\nconst popupFormEditAvatar = document.forms[\"edit-avatar\"];\r\nconst popupFormAddCard = document.forms[\"new-place\"];\r\n\r\nconst popupFormImageView = document.querySelector(\".popup_type_image\");\r\n\r\nconst popupImage = popupFormImageView.querySelector(\".popup__image\");\r\nconst popupCaption = popupFormImageView.querySelector(\".popup__caption\");\r\n\r\nconst buttonOpenPopupProfile = document.querySelector(\".profile__edit-button\");\r\n\r\nconst buttonEditAvatar = document.querySelector(\".profile__image\");\r\n\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileImage = document.querySelector(\".profile__image\");\r\n\r\nconst buttonOpenPopupCard = document.querySelector(\".profile__add-button\");\r\nconst buttonConfirmAccept = popupConfirm.querySelector(\r\n  \".confirm_accept__button\"\r\n);\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nlet userId;\r\n\r\nconst renderLoading = (isLoading, button) => {\r\n  button.textContent = isLoading ? \"Сохранение...\" : \"Сохранить\";\r\n};\r\n\r\nconst confirmDeleteCard = (evt, cardId) => {\r\n  openModal(popupConfirm);\r\n  popupConfirm.dataset.cardId = cardId;\r\n};\r\n\r\nconst handleConfirmDeleteCard = async (evt) => {\r\n  deleteCard(popupConfirm.dataset.cardId)\r\n    .then((res) => {\r\n      const card = document.getElementById(popupConfirm.dataset.cardId);\r\n      card.remove();\r\n      popupConfirm.dataset.cardId=\"\";\r\n      closeModal(popupConfirm);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\nbuttonConfirmAccept.addEventListener(\"click\", handleConfirmDeleteCard);\r\n\r\nconst handleFormEditSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupFormEditProfile.querySelector(\".popup__button\"));\r\n  updateUser({\r\n    name: popupFormEditProfile.name.value,\r\n    about: popupFormEditProfile.description.value,\r\n  })\r\n    .then((userInfo) => {\r\n      profileName.textContent = userInfo.name;\r\n      profileDescription.textContent = userInfo.about;\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(\r\n        false,\r\n        popupFormEditProfile.querySelector(\".popup__button\")\r\n      );\r\n    });\r\n};\r\npopupFormEditProfile.addEventListener(\"submit\", handleFormEditSubmit);\r\n\r\nbuttonOpenPopupProfile.addEventListener(\"click\", function () {\r\n  clearValidation(popupFormEditProfile, validationConfig);\r\n  popupFormEditProfile.elements.name.value = profileName.textContent;\r\n  popupFormEditProfile.elements.description.value =\r\n    profileDescription.textContent;\r\n  openModal(popupProfile);\r\n});\r\n\r\nconst handleAvatarFormSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupFormEditAvatar.querySelector(\".popup__button\"));\r\n  updateUserAvatar(popupFormEditAvatar.link.value)\r\n    .then((userInfo) => {\r\n      profileImage.style.backgroundImage = `url(${userInfo.avatar})`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, popupFormEditAvatar.querySelector(\".popup__button\"));\r\n    });\r\n};\r\npopupFormEditAvatar.addEventListener(\"submit\", handleAvatarFormSubmit);\r\n\r\nbuttonEditAvatar.addEventListener(\"click\", (evt) => {\r\n  popupFormEditAvatar.reset();\r\n  clearValidation(popupFormEditAvatar, validationConfig);\r\n  openModal(popupAvatar);\r\n});\r\n\r\nconst handleAddCardFormSubmit = async (evt) => {\r\n  evt.preventDefault();\r\n  renderLoading(true, popupCard.querySelector(\".popup__button\"));\r\n\r\n  const name = popupFormAddCard.elements.name.value;\r\n  const link = popupFormAddCard.elements.link.value;\r\n  addCard({ name, link })\r\n    .then((card) => {\r\n      const newCard = createCard(\r\n        card,\r\n        userId,\r\n        confirmDeleteCard,\r\n        likeCard,\r\n        openPopupImage\r\n      );\r\n      placesList.prepend(newCard);\r\n      closeModal(popupCard);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(false, popupFormAddCard.querySelector(\".popup__button\"));\r\n    });\r\n};\r\npopupFormAddCard.addEventListener(\"submit\", handleAddCardFormSubmit);\r\n\r\nbuttonOpenPopupCard.addEventListener(\"click\", function () {\r\n  popupFormAddCard.reset();\r\n  clearValidation(popupFormAddCard, validationConfig);\r\n  openModal(popupCard);\r\n});\r\n\r\nfunction openPopupImage(item) {\r\n  popupImage.src = item.link;\r\n  popupImage.alt = item.name;\r\n  popupCaption.textContent = item.name;\r\n  openModal(popupFormImageView);\r\n}\r\n\r\npopups.forEach((popup) => {\r\n  popup.classList.add(\"popup_is-animated\");\r\n  popup.addEventListener(\"mousedown\", (evt) => {\r\n    if (evt.target.classList.contains(\"popup_is-opened\")) {\r\n      closeModal(popup);\r\n    }\r\n    if (evt.target.classList.contains(\"popup__close\")) {\r\n      closeModal(popup);\r\n    }\r\n  });\r\n});\r\n\r\n// Загрузка аватара и карточек\r\nPromise.all([getInitialUser(), getInitialCards()])\r\n  .then(([userInfo, initialCards]) => {\r\n    userId = userInfo._id;\r\n    profileName.textContent = userInfo.name;\r\n    profileDescription.textContent = userInfo.about;\r\n    profileImage.style.backgroundImage = `url(${userInfo.avatar})`;\r\n\r\n    initialCards.forEach((card) => {\r\n      const newCard = createCard(\r\n        card,\r\n        userId,\r\n        confirmDeleteCard,\r\n        likeCard,\r\n        openPopupImage\r\n      );\r\n      placesList.append(newCard);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nenableValidation(validationConfig);*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import './pages/index.css';*/\r\n/*import { initialCards } from './scripts/cards.js'*/\r\n/*import { createCard, likeCard, deleteCard } from './scripts/card.js';\r\nimport { openModal, closeModal} from './scripts/modal.js';\r\nimport {enableValidation, clearValidation} from './scripts/validation.js';\r\nimport {getUserInfo, getInitialCards, updateProfile, addNewCardServer, updateAvatar, deleteCardServer} from './scripts/api.js';\r\n\r\n\r\n\r\nlet userId;\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\"\r\n};\r\n\r\n\r\nconst avatarPopup = document.querySelector(\".popup_type_avatar\");\r\nconst avatarForm = document.forms[\"update-avatar\"];\r\nconst avatarInput = avatarForm.querySelector(\".popup__input_type_avatar-url\");\r\nconst avatarImage = document.querySelector(\".profile__image\");\r\n\r\n\r\n//Получаем элементы из DOM\r\nconst cardTemplate = document.querySelector('#card-template')\r\nconst placesList = document.querySelector('.places__list')\r\nconst popups = document.querySelectorAll('.popup')\r\n\r\n//Модалки\r\nconst modals = {\r\n  popupTypeEdit: document.querySelector('.popup_type_edit'),\r\n  addNewCard: document.querySelector('.popup_type_new-card'),\r\n  showImage: document.querySelector('.popup_type_image')\r\n}\r\n\r\n//Элементы модалок\r\nconst modalEdit = {\r\n  openButton: document.querySelector('.profile__edit-button'),\r\n  closeButton: modals.popupTypeEdit.querySelector('.popup__close')\r\n}\r\n\r\nconst modalAddCard = {\r\n  openButton: document.querySelector('.profile__add-button'),\r\n  closeButton: modals.addNewCard.querySelector('.popup__close')\r\n}\r\n\r\nconst modalShowImage = {\r\n  image: document.querySelector('.popup__image'),\r\n  text: document.querySelector('.popup__caption'),\r\n  closeButton: modals.showImage.querySelector('.popup__close')\r\n}\r\n\r\n//Формы\r\nconst forms = {\r\n  addNewCard: document.forms['new-place'],\r\n  popupTypeEdit: document.forms['edit-profile']\r\n}\r\n\r\n//Элементы форм\r\nconst addCardForm = {\r\n  form: document.forms['new-place'],\r\n  url: document.querySelector('.popup__input_type_url'),\r\n  name: document.querySelector('.popup__input_type_card-name')\r\n}\r\n\r\nconst profile = {\r\n  name: document.querySelector('.profile__title'),\r\n  description: document.querySelector('.profile__description')\r\n}\r\n\r\nconst editForm = {\r\n  form: document.forms['edit-profile'],\r\n  nameInput: document.querySelector('.popup__input_type_name'),\r\n  jobInput: document.querySelector('.popup__input_type_description')\r\n}*/\r\n\r\n\r\n//Добавление карточек в DOM\r\n/*initialCards.forEach((cardData) => {\r\n  placesList.appendChild(createCard(cardTemplate, cardData, deleteCard, likeCard, showImage))\r\n})*/\r\n\r\n//Прослушиватели\r\n\r\n//Открываем по клику на кнопку\r\n/*modalEdit.openButton.addEventListener('click', () => {\r\n  openModal(modals.popupTypeEdit)\r\n  fillForm()\r\n})\r\n\r\nmodalAddCard.openButton.addEventListener('click', () => {\r\n  openModal(modals.addNewCard)\r\n})\r\n\r\n//Закрываем окна\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector('.popup__close')\r\n\r\n  //Закрываем по клику на кнопку\r\n  closeButton.addEventListener('click', () => closeModal(popup))\r\n\r\n  //Закрываем модалку по клику вне\r\n  popup.addEventListener('mousedown', (evt) => {\r\n    if (evt.target === evt.currentTarget) {\r\n      closeModal(popup)\r\n    }  \r\n  })\r\n\r\n  //Анимация окон\r\n  popup.classList.add('popup_is-animated')\r\n})\r\n\r\n//Отправляем формы\r\nforms.popupTypeEdit.addEventListener('submit', submitEditForm)\r\n\r\nforms.addNewCard.addEventListener('submit', (evt) => {\r\n  addNewCard(evt, cardTemplate, showImage, closeModal)\r\n});\r\n\r\n//Функция просмотра изображения\r\nfunction showImage(item) {\r\n  modalShowImage.image.src = item.link\r\n  modalShowImage.image.alt = item.name\r\n  modalShowImage.text.textContent = item.name\r\n  openModal(modals.showImage)\r\n}\r\n\r\n\r\n//Создаем новую карточку\r\nfunction addNewCard(evt, cardTemplate, showImage, closeModal) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault()\r\n\r\n  //Объект с данными новой карточки\r\n  const newCardData = {\r\n    name: addCardForm.name.value,\r\n    link: addCardForm.url.value\r\n  }\r\n\r\n  //Новая карточка\r\n  const newCard = createCard(\r\n    cardTemplate, \r\n    newCardData, \r\n    deleteCard, \r\n    likeCard, \r\n    showImage\r\n  )\r\n\r\n  placesList.prepend(newCard)\r\n\r\n  addCardForm.form.reset()\r\n\r\n  closeModal(modals.addNewCard)\r\n  \r\n}\r\n\r\n//Присваиваем поля форме\r\nfunction fillForm() {\r\n  editForm.nameInput.value = profile.name.textContent;\r\n  editForm.jobInput.value = profile.description.textContent;\r\n}\r\n\r\n// Обработчик 'отправки' формы\r\nfunction submitEditForm(evt) {\r\n  //Отменяем отправку формы\r\n  evt.preventDefault();\r\n\r\n  //Обновляем поля и закрываем форму\r\n  profile.name.textContent = editForm.nameInput.value\r\n  profile.description.textContent = editForm.jobInput.value\r\n    \r\n  closeModal(modals.popupTypeEdit)\r\n}*/\r\n\r\n/*Promise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n\r\n    // Обновляем профиль данными с сервера\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n    \r\n    // Отображаем карточки с сервера\r\n    cards.forEach((cardData) => {\r\n      const cardElement = createCard(\r\n        cardData,\r\n        deleteCard, \r\n        likeCard, \r\n        showImage,\r\n        userId\r\n      );\r\n      placesList.append(cardElement);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(\"Ошибка при загрузке данных:\", err);\r\n  });*/\r\n\r\n\r\n  \r\n  // Загрузка аватара и карточек\r\n/*Promise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n    profile.name.textContent = userData.name;\r\n    profile.description.textContent = userData.about;\r\n    avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n    \r\n    cards.forEach((card) => {\r\n      const newCard = createCard(\r\n        card,\r\n        userId,\r\n        deleteCardServer,\r\n        likeCard,\r\n        showImage\r\n      );\r\n      placesList.append(newCard);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n\r\n\r\n  //Аватар\r\n\r\n// Добавить обработчик открытия попапа аватара\r\navatarImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(avatarPopup);\r\n});\r\n\r\n// Добавить обработчик отправки формы аватара\r\navatarForm.addEventListener(\"submit\", (evt) => {\r\n  evt.preventDefault();\r\n  const submitButton = evt.submitter;\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      avatarImage.style.backgroundImage = `url(${userData.avatar})`;\r\n      closeModal(avatarPopup);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n    });\r\n});\r\n\r\n\r\nenableValidation(validationConfig);*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport './pages/index.css';\r\nimport { createCard } from './scripts/card.js';\r\nimport { openModal, closeModal, closeModalOverlay } from './scripts/modal.js';\r\nimport { enableValidation, clearValidation } from './scripts/validation.js';\r\nimport { config, updatePhotoCheck, updatePhoto, updateProfile, addCard, getUserData, getInitialCards, deleteCard, addLike } from './scripts/api.js';\r\n\r\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\r\nconst popupEditProfile = document.querySelector('.popup_type_edit');\r\nconst buttonAddCard = document.querySelector('.profile__add-button');\r\nconst popupAddCard = document.querySelector('.popup_type_new-card');\r\nconst popupNewAvatar = document.querySelector('.popup_type_new_avatar');\r\nconst avatar = document.querySelector('.profile__image');\r\nconst nameInput = document.querySelector('.popup__input_type_name');\r\nconst aboutInput = document.querySelector('.popup__input_type_description');\r\nconst nameTitle = document.querySelector('.profile__title');\r\nconst jobTitle = document.querySelector('.profile__description');\r\nconst formEditProfile = document.querySelector('.popup__form[name=\"edit-profile\"]');\r\nconst formAddCard = document.querySelector('.popup__form[name=\"new-place\"]');\r\nconst popupImage = document.querySelector('.popup__image');\r\nconst popupImageOpen = document.querySelector('.popup_type_image');\r\nconst popupImageDescription = document.querySelector('.popup__caption');\r\nconst cardList = document.querySelector('.places__list');\r\nconst formPhotoProfile = document.querySelector('.popup__form[name=\"new-avatar\"]');\r\nconst newAvatarPhoto = document.querySelector('.popup__input_type_avatar');\r\n\r\n/**\r\n * Объект опции:\r\n * 1. Элемент формы.\r\n * 2. Элемент поля ввода.\r\n * 3. Кнопка отправки формы.\r\n * 4. Класс для отключения кнопки.\r\n * 5. Класс для выделения попапа цветом.\r\n * 6. Класс для отображения попапа.\r\n */\r\n\r\nconst configValidation = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__error_visible',\r\n};\r\n\r\n// Открытие модального окна по нажатию на аватарку. \r\navatar.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    openModal(popupNewAvatar);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку добавления карточки.\r\nbuttonAddCard.addEventListener('click', function () {\r\n    clearValidation(formAddCard, configValidation);\r\n    openModal(popupAddCard);\r\n});\r\n\r\n// Открытие модального окна по нажатию на кнопку редактирования карточки.\r\nbuttonEditProfile.addEventListener('click', function () {\r\n    clearValidation(formEditProfile, configValidation);\r\n    nameInput.value = nameTitle.textContent;\r\n    aboutInput.value = jobTitle.textContent;\r\n    openModal(popupEditProfile);\r\n});\r\n\r\n// Поиск кнопки закрытия по всей странице для закрытия модального окна.\r\ndocument.addEventListener('click', function (evt) {\r\n    if (evt.target.classList.contains('popup__close')) {\r\n        const currentModal = evt.target.closest('.popup');\r\n        closeModal(currentModal);\r\n    }\r\n});\r\n\r\n// Открытие модального окна с изображением.\r\nfunction openPopupImage(imageSrc, imageAlt) {\r\n    popupImage.src = imageSrc;\r\n    popupImage.alt = imageAlt;\r\n    popupImageDescription.textContent = imageAlt;\r\n    openModal(popupImageOpen);\r\n};\r\n\r\n// Закрытие модального окна по оверлею.\r\ndocument.addEventListener('click', closeModalOverlay);\r\n\r\n// Запуск функции поиска всех форм на странице.\r\nenableValidation(configValidation);\r\n\r\n// Обновление фотографии.\r\nformPhotoProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formPhotoProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n    updatePhotoCheck(newAvatarPhoto)\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n    updatePhoto(newAvatarPhoto)\r\n        .then((data) => {\r\n            avatar.style.backgroundImage = `url(${data.avatar})`;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\";\r\n            buttonElement.disabled = false;\r\n            closeModal(popupNewAvatar);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка:', error);\r\n        })\r\n});\r\n\r\n// Редактирование профиля.\r\nformEditProfile.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    nameTitle.textContent = nameInput.value;\r\n    jobTitle.textContent = aboutInput.value;\r\n\r\n    const buttonElement = formEditProfile.querySelector('.popup__button');\r\n    buttonElement.textContent = \"Сохранение...\"\r\n    buttonElement.disabled = true;\r\n\r\n    updateProfile(nameInput.value, aboutInput.value)\r\n        .then((data) => {\r\n            nameTitle.textContent = data.name;\r\n            jobTitle.textContent = data.about;\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            closeModal(popupEditProfile);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\n// Добавление карточки.\r\nformAddCard.addEventListener('submit', function (evt) {\r\n    evt.preventDefault();\r\n\r\n    const buttonElement = formAddCard.querySelector('.popup__button');\r\n    const item = {\r\n        name: document.querySelector('.popup__input_type_card-name').value,\r\n        link: document.querySelector('.popup__input_type_url').value,\r\n    }\r\n    buttonElement.textContent = \"Сохранение...\";\r\n    buttonElement.disabled = true;\r\n\r\n    addCard(item.name, item.link)\r\n        .then((data) => {\r\n            const newCard = createCard(data,\r\n                deleteCard,\r\n                addLike,\r\n                data.owner._id,\r\n                openPopupImage);\r\n            cardList.prepend(newCard);\r\n        })\r\n        .finally(() => {\r\n            buttonElement.textContent = \"Сохранить\"\r\n            buttonElement.disabled = false;\r\n            formAddCard.reset();\r\n            closeModal(popupAddCard);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Ошибка', error);\r\n        })\r\n});\r\n\r\nconst promises = [getUserData(), getInitialCards()];\r\nPromise.all(promises)\r\n    .then(([userData, cards]) => {\r\n        document.querySelector('.profile__image').style.backgroundImage = `url(${userData.avatar})`;\r\n        nameTitle.textContent = userData.name;\r\n        jobTitle.textContent = userData.about;\r\n        const userId = userData._id;\r\n        cards.forEach(function (item) {\r\n            const newCard = createCard(item, deleteCard, addLike, userId, openPopupImage);\r\n            cardList.append(newCard);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.log('Ошибка', error);\r\n    });"],"names":["openModal","currentModal","classList","add","document","addEventListener","closeModalEscape","closeModal","remove","removeEventListener","evt","key","querySelector","createCard","card","deleteCard","addLike","userId","openPopupImage","templateCard","content","cloneNode","likeButton","image","likeCount","textContent","likes","length","name","some","like","_id","popupDelete","currentLike","contains","then","data","console","log","toggle","catch","error","owner","link","src","alt","hideInputError","formElement","inputElement","configValidation","errorElement","concat","id","errorClass","inputErrorClass","disableSubmitButton","button","config","disabled","inactiveButtonClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","handleResponse","response","ok","json","Promise","reject","status","cardId","fetch","method","headers","authorization","buttonEditProfile","popupEditProfile","buttonAddCard","popupAddCard","popupNewAvatar","avatar","nameInput","aboutInput","nameTitle","jobTitle","formEditProfile","formAddCard","popupImage","popupImageOpen","popupImageDescription","cardList","formPhotoProfile","newAvatarPhoto","formSelector","imageSrc","imageAlt","value","target","closest","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","preventDefault","url","get","startsWith","body","JSON","stringify","updatePhoto","style","backgroundImage","finally","nameData","aboutData","about","nameCard","linkCard","item","newCard","prepend","reset","promises","all","_ref","_ref2","userData","cards","append"],"sourceRoot":""}